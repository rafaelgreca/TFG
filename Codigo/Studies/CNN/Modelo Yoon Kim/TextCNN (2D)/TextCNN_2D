{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of TextCNN_1D","provenance":[{"file_id":"1fwLg3iDRncD7JInzfhJJ_mg4wDpeihHg","timestamp":1629671437352}],"collapsed_sections":[],"authorship_tag":"ABX9TyOP5J0357es0CThyUCJofiC"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"MvrZGmWA8LQG","executionInfo":{"status":"ok","timestamp":1629679209673,"user_tz":180,"elapsed":30370,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["%%capture\n","!pip install pandas\n","!pip install numpy\n","!pip install tensorflow\n","!pip install keras\n","!pip install sklearn\n","!pip install matplotlib\n","!pip install seaborn\n","!pip install unidecode\n","!pip install -U imbalanced-learn\n","!pip3 install pickle5"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jbkU3YVN8Pwd","executionInfo":{"status":"ok","timestamp":1629679212329,"user_tz":180,"elapsed":2670,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"d7bc7972-c321-478d-ca18-473ef93ddb85"},"source":["import tensorflow as tf\n","import pandas as pd\n","import warnings\n","import unidecode\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pickle5 as pickle\n","import random\n","import re\n","import nltk\n","nltk.download('stopwords')\n","\n","from imblearn.over_sampling import RandomOverSampler\n","from nltk.corpus import stopwords\n","from sklearn.model_selection import train_test_split\n","from tensorflow import keras\n","from keras.models import Sequential, Model\n","from keras.layers import Reshape, Dense, Dropout, Flatten, Input, MaxPooling2D, Convolution2D, Embedding, Concatenate\n","from keras.regularizers import l2\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from sklearn.metrics import f1_score\n","\n","sw = set(stopwords.words('english'))\n","random.seed(23)\n","warnings.filterwarnings('ignore')\n","np.random.seed(23)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fbIsBrCP1iMA"},"source":["## Preprocessing"]},{"cell_type":"code","metadata":{"id":"DVGCip5q1hla","executionInfo":{"status":"ok","timestamp":1629679212333,"user_tz":180,"elapsed":17,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def remove_username(text):\n","  text = re.sub(r'\\@[^\\s]+', ' ', text)\n","  return text\n","\n","def remove_newline(text):\n","  text = text.replace('\\n', ' ')\n","  return text\n","\n","def only_letters(text):\n","  text = re.sub(r'[^a-záâàãéêèẽíìîĩóòõôúùũû\\s]+', ' ', text)\n","  return text\n","\n","def remove_link(text):\n","  text = re.sub(r'www\\.?[^\\s]+', ' ', text)\n","  return text\n","\n","def remove_hyperlink(text):\n","  text = re.sub(r'\\<.?\\>', ' ', text)\n","  return text\n","\n","def remove_accent(text):\n","  text = unidecode.unidecode(text)\n","  return text\n","\n","def adjustment_text(text):\n","  text = re.sub(r'\\s+', ' ', text)\n","  text = text.strip()\n","  return text\n","\n","def remove_stopwords(text):\n","  text = [word for word in text.split() if word not in sw]\n","  text = ' '.join(text)\n","  return text\n","\n","def remove_spam(text):\n","  text = re.sub(r'\\&amp', ' ', text)\n","  text = re.sub(r'\\&lt', ' ', text)\n","  text = re.sub(r'\\&gt', ' ', text)\n","  text = re.sub(r'\\#follow|\\#followme|\\#like|\\#f4f|\\#photooftheday', ' ', text)\n","  return text\n","\n","def remove_slangs(text):\n","  text = re.sub(r' b4 ', ' before ', text)\n","  text = re.sub(r' 2b ', ' to be ', text)\n","  text = re.sub(r' 2morrow ', ' tomorrow ', text)\n","  text = re.sub(r' rn ', ' right now ', text)\n","  text = re.sub(r' brb ', ' be right back ', text)\n","  text = re.sub(r' mb ', ' my bad ', text)\n","  text = re.sub(r' luv ', ' love ', text)\n","  text = re.sub(r' b ', ' be ', text)\n","  text = re.sub(r' r ', ' are ', text)\n","  text = re.sub(r' u ', ' you ', text)\n","  text = re.sub(r' y ', ' why ', text)\n","  text = re.sub(r' ur ', ' your ', text)\n","  text = re.sub(r' hbd ', ' happy birthday ', text)\n","  text = re.sub(r' bday ', ' birthday ', text)\n","  text = re.sub(r' bihday ', ' birthday ', text)\n","  text = re.sub(r' omg ', ' oh my god ', text)\n","  text = re.sub(r' lol ', ' laughing out loud ', text)\n","  return text\n","\n","def remove_abbreviations(text):\n","  text = re.sub(r\" can\\'t \", \" can not \", text)\n","  text = re.sub(r\" i\\'m \", \" i am \", text)\n","  text = re.sub(r\" i\\'ll \", \" i will \", text)\n","  text = re.sub(r\" i\\'d \", \" i would \", text)\n","  text = re.sub(r\" i\\'ve \", \" i have \", text)\n","  text = re.sub(r\" ain\\'t \", \" am not \", text)\n","  text = re.sub(r\" haven\\'t \", \" have not \", text)\n","  text = re.sub(r\" hasn\\'t \", \" has not \", text)\n","  text = re.sub(r\" can\\'t \", \" can not \", text)\n","  text = re.sub(r\" won\\'t \", \" will not \", text)\n","  text = re.sub(r\" you\\'re \", \" you are \", text)\n","  text = re.sub(r\" we\\'re \", \" we are \", text)\n","  text = re.sub(r\" they\\'re \", \" they are \", text)\n","  text = re.sub(r\" he\\'s \", \" he is \", text)\n","  text = re.sub(r\" she\\'s \", \" she is \", text)\n","  text = re.sub(r\" it\\'s \", \" it is \", text)\n","  text = re.sub(r\" don\\'t \", \" do not \", text)\n","  text = re.sub(r\" doesn\\'t \", \" does not \", text)\n","  text = re.sub(r\" wouldn\\'t \", \" would not \", text)\n","  text = re.sub(r\" couldn\\'t \", \" could not \", text)\n","  text = re.sub(r\" shouldn\\'t \", \" should not \", text)\n","  return text\n","\n","def remove_one_len_word(text):\n","  text = re.sub(r'\\b[a-z]\\b', ' ', text)\n","  return text\n","\n","def preprocessing(data):\n","  data['cleaned_tweet'] = data['tweet'].apply(str)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(lambda x: x.lower())\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_newline)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_hyperlink)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_spam)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_link)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_username)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_abbreviations)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(only_letters)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_accent)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_slangs)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_stopwords)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_one_len_word)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(adjustment_text)\n","  return data"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wM2uoJUZ8oVr"},"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0PRNAa9_-qIM","executionInfo":{"status":"ok","timestamp":1629679212695,"user_tz":180,"elapsed":375,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"55b98074-3791-4181-f863-93e784ce2ec6"},"source":["normal_data = pd.read_csv('Data/train.csv')\n","normal_data = normal_data.drop(columns=['id'])\n","normal_data.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>tweet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>@user when a father is dysfunctional and is s...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>@user @user thanks for #lyft credit i can't us...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>bihday your majesty</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>#model   i love u take with u all the time in ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>factsguide: society now    #motivation</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   label                                              tweet\n","0      0   @user when a father is dysfunctional and is s...\n","1      0  @user @user thanks for #lyft credit i can't us...\n","2      0                                bihday your majesty\n","3      0  #model   i love u take with u all the time in ...\n","4      0             factsguide: society now    #motivation"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iv3WqTC3kKPP","executionInfo":{"status":"ok","timestamp":1629679212697,"user_tz":180,"elapsed":30,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"e801ace7-a31f-44fe-97f7-bfdc12b5be39"},"source":["normal_data.shape"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(31962, 2)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YWsDE9A2kD_u","executionInfo":{"status":"ok","timestamp":1629679212698,"user_tz":180,"elapsed":22,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"acf57eb4-bda3-4b8a-eda7-0c903a17ca8d"},"source":["ros = RandomOverSampler(random_state=23, sampling_strategy='minority')\n","X_resampled, y_resampled = ros.fit_resample(normal_data[['tweet']], normal_data['label'])\n","data_augmentation = pd.concat([X_resampled, y_resampled], axis=1)\n","data_augmentation.head()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>@user when a father is dysfunctional and is s...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>@user @user thanks for #lyft credit i can't us...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>bihday your majesty</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>#model   i love u take with u all the time in ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>factsguide: society now    #motivation</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                               tweet  label\n","0   @user when a father is dysfunctional and is s...      0\n","1  @user @user thanks for #lyft credit i can't us...      0\n","2                                bihday your majesty      0\n","3  #model   i love u take with u all the time in ...      0\n","4             factsguide: society now    #motivation      0"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"szfpHt7rzTIb","executionInfo":{"status":"ok","timestamp":1629679212700,"user_tz":180,"elapsed":21,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"aa168be1-45b0-40ad-a0bc-23d6d2f06e48"},"source":["data_augmentation.shape"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(59440, 2)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2Y4K9Bt11Zeu","executionInfo":{"status":"ok","timestamp":1629679215472,"user_tz":180,"elapsed":2788,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"d21786ea-2a3f-46f6-cdf0-5418a60a8f8e"},"source":["preprocessed_data = normal_data.copy()\n","preprocessed_data = preprocessing(preprocessed_data)\n","preprocessed_data = preprocessed_data.replace('None', pd.NA)\n","preprocessed_data = preprocessed_data.dropna()\n","preprocessed_data = preprocessed_data.drop_duplicates()\n","preprocessed_data = preprocessed_data.drop(columns=['tweet'])\n","preprocessed_data = preprocessed_data.rename(columns={'cleaned_tweet': 'tweet'})\n","preprocessed_data.head()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>tweet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>father dysfunctional selfish drags kids dysfun...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>thanks lyft credit use cause offer wheelchair ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>birthday majesty</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>model love take time</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>factsguide society motivation</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   label                                              tweet\n","0      0  father dysfunctional selfish drags kids dysfun...\n","1      0  thanks lyft credit use cause offer wheelchair ...\n","2      0                                   birthday majesty\n","3      0                               model love take time\n","4      0                      factsguide society motivation"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTkLD9L4zM0Z","executionInfo":{"status":"ok","timestamp":1629679215475,"user_tz":180,"elapsed":33,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"2010840d-5097-4001-8a7d-5fa6d3539fce"},"source":["preprocessed_data.shape"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(29530, 2)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hebFvYTaBpAG","executionInfo":{"status":"ok","timestamp":1629679215477,"user_tz":180,"elapsed":30,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"40f96402-078b-4815-b60f-c1ca57f7c53d"},"source":["ros = RandomOverSampler(random_state=23, sampling_strategy='minority')\n","X_resampled, y_resampled = ros.fit_resample(preprocessed_data[['tweet']], preprocessed_data['label'])\n","data_preprocessing_augmentation = pd.concat([X_resampled, y_resampled], axis=1)\n","data_preprocessing_augmentation.head()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>father dysfunctional selfish drags kids dysfun...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>thanks lyft credit use cause offer wheelchair ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>birthday majesty</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>model love take time</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>factsguide society motivation</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                               tweet  label\n","0  father dysfunctional selfish drags kids dysfun...      0\n","1  thanks lyft credit use cause offer wheelchair ...      0\n","2                                   birthday majesty      0\n","3                               model love take time      0\n","4                      factsguide society motivation      0"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q1gSgHkFzPOt","executionInfo":{"status":"ok","timestamp":1629679215478,"user_tz":180,"elapsed":26,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"561ba433-96f2-4ec7-950a-900a61b0d68e"},"source":["data_preprocessing_augmentation.shape"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(55034, 2)"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"iCpQSNEE7wlo"},"source":["## Word2vec"]},{"cell_type":"code","metadata":{"id":"HmVKbyWJ7y1W","executionInfo":{"status":"ok","timestamp":1629679215481,"user_tz":180,"elapsed":25,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["with open(r\"Data/word2vec.pickle\", \"rb\") as output_file:\n","    word2vec_embedding = pickle.load(output_file)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"Df2gQAxIsteF","executionInfo":{"status":"ok","timestamp":1629679215482,"user_tz":180,"elapsed":24,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["with open(r\"Data/word2vec_preprocessing.pickle\", \"rb\") as output_file:\n","    word2vec_preprocessing_embedding = pickle.load(output_file)"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2tnMZB6L9Cwf"},"source":["## Parameters"]},{"cell_type":"code","metadata":{"id":"RLPjaO0_9HRS","executionInfo":{"status":"ok","timestamp":1629679215484,"user_tz":180,"elapsed":25,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["non_linearity_function = 'relu'\n","kernel_size = [3, 4, 5]\n","filters = 100\n","dropout_rate = 0.5\n","l2_constraint = 3\n","epochs = 10\n","batch_size = 100\n","embedding_dim = 300\n","length_size = 10"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xgf0e9zIM_Ee"},"source":["## Tokenization + padding + splitting data step"]},{"cell_type":"code","metadata":{"id":"wQ6cy3KnF4s_","executionInfo":{"status":"ok","timestamp":1629679215485,"user_tz":180,"elapsed":25,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def preprocessing_step(data):\n","  tokenizer = Tokenizer()\n","  tokenizer.fit_on_texts(data['tweet'].values)\n","  data['tokenized'] = tokenizer.texts_to_sequences(data['tweet'].values)\n","\n","  vocab_size = len(tokenizer.word_index) + 1\n","\n","  X = pad_sequences(sequences = data['tokenized'],\n","                  maxlen = length_size,\n","                  padding = 'post')\n","\n","  y = data['label']\n","\n","  X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.15, random_state=23)\n","\n","  return vocab_size, tokenizer, X_train, X_validation, y_train, y_validation"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Raq3KN353mxO"},"source":["## Predict"]},{"cell_type":"code","metadata":{"id":"dSZq35fD3lTY","executionInfo":{"status":"ok","timestamp":1629679215487,"user_tz":180,"elapsed":26,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def predict(tokenizer, model, prep, augmentation, nome):\n","\n","  test = pd.read_csv('Data/test.csv')\n","\n","  if prep:\n","    test = preprocessing(test)\n","    test['tokenized'] = tokenizer.texts_to_sequences(test['cleaned_tweet'].values)\n","  else:\n","    test['tokenized'] = tokenizer.texts_to_sequences(test['tweet'].values)\n","\n","  X_test = pad_sequences(sequences = test['tokenized'],\n","                         maxlen = length_size,\n","                         padding = 'post')\n","\n","  predicted = (model.predict(X_test) > 0.5).astype(\"int32\")\n","  prediction = pd.DataFrame()\n","  prediction['id'] = test['id']\n","  prediction['label'] = predicted\n","\n","  if prep:\n","\n","    if augmentation:\n","      prediction.to_csv('Submission/' + nome + '_preprocessing_augmentation.csv', index=False)\n","    else:\n","      prediction.to_csv('Submission/' + nome + '_preprocessing.csv', index=False)\n","\n","  else:\n","\n","    if augmentation:\n","      prediction.to_csv('Submission/' + nome + '_augmentation.csv', index=False)\n","    else:\n","      prediction.to_csv('Submission/' + nome + '.csv', index=False)"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KmfpDUot3oyv"},"source":["## Save Models"]},{"cell_type":"code","metadata":{"id":"_ou2_2Zq3o7f","executionInfo":{"status":"ok","timestamp":1629679215836,"user_tz":180,"elapsed":375,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def save_model(modelo, nome_modelo, preprocessing, augmentation):\n","  \n","  file_name = 'model_'\n","\n","  if preprocessing:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_preprocessing_augmentantion'\n","    else:\n","      file_name = file_name + nome_modelo + '_preprocessing'\n","  else:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_augmentantion'\n","    else:\n","      file_name = file_name + nome_modelo\n","\n","  modelo.save('Model/' + file_name)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PWYmZv062f_D"},"source":["## Save embeddings"]},{"cell_type":"code","metadata":{"id":"xtMYplLE2gPS","executionInfo":{"status":"ok","timestamp":1629679215845,"user_tz":180,"elapsed":18,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def save_embedding(modelo, tokenizer, nome_modelo, preprocessing, augmentation):\n","  embeddings = modelo.get_layer('embedding').get_weights()[0]\n","  w2v_my = {}\n","\n","  for word, index in tokenizer.word_index.items():\n","      w2v_my[word] = embeddings[index]\n","  \n","  file_name = 'embedding_'\n","\n","  if preprocessing:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_preprocessing_augmentantion.pickle'\n","    else:\n","      file_name = file_name + nome_modelo + '_preprocessing.pickle'\n","  else:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_augmentantion.pickle'\n","    else:\n","      file_name = file_name + nome_modelo + '.pickle'\n","\n","  with open('Model/' + file_name, 'wb') as handle:\n","    pickle.dump(w2v_my, handle, protocol=pickle.HIGHEST_PROTOCOL)"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Xn-bmRXK8fwV"},"source":["## CNN-rand"]},{"cell_type":"code","metadata":{"id":"9A-7AYJW8fMI","executionInfo":{"status":"ok","timestamp":1629679215846,"user_tz":180,"elapsed":17,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def cnn_rand(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=(length_size, ))\n","\n","  #embedding layer\n","  embedding = Embedding(input_dim=vocab_size,\n","                        output_dim=embedding_dim,\n","                        input_length=length_size,\n","                        name='embedding')(input)\n","\n","  reshape = Reshape((length_size, embedding_dim, 1))(embedding)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution2D(filters=filters,\n","                        kernel_size=(size, embedding_dim),\n","                        activation=non_linearity_function,\n","                        kernel_regularizer=l2(l2_constraint))(reshape)\n","    \n","    pool = MaxPooling2D(strides=(1, 1),\n","                        pool_size=(2, 1),\n","                        padding='valid')(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_random = Model(inputs=input, outputs=output)\n","  model_random.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_random.summary()\n","\n","  history_random = model_random.fit(X_train, \n","                                    y_train,\n","                                    batch_size=batch_size,\n","                                    epochs=epochs,\n","                                    validation_data=(X_validation, y_validation),\n","                                    shuffle=True)\n","  \n","  save_embedding(model_random, tokenizer, 'CNN-rand', preprocessing, augmentation)\n","\n","  save_model(model_random, 'CNN-rand', preprocessing, augmentation)\n","\n","  predicted_validation = (model_random.predict(X_validation) > 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_random, preprocessing, augmentation, 'CNN-rand')\n","  \n","  return model_random, history_random, score"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CI9jb9a40sWZ"},"source":["## CNN-static"]},{"cell_type":"code","metadata":{"id":"JDx6XooT0ulS","executionInfo":{"status":"ok","timestamp":1629679215846,"user_tz":180,"elapsed":15,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def cnn_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=(length_size, ))\n","\n","  #embedding layer\n","  if preprocessing:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_preprocessing_embedding],\n","                          trainable=False,\n","                          name='embedding')(input)\n","  else:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_embedding],\n","                          trainable=False,\n","                          name='embedding')(input)\n","\n","  reshape = Reshape((length_size, embedding_dim, 1))(embedding)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution2D(filters=filters,\n","                        kernel_size=(size, embedding_dim),\n","                        activation=non_linearity_function,\n","                        kernel_regularizer=l2(l2_constraint))(reshape)\n","    \n","    pool = MaxPooling2D(strides=(1, 1),\n","                        pool_size=(2, 1),\n","                        padding='valid')(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_static = Model(inputs=input, outputs=output)\n","  model_static.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_static.summary()\n","\n","  history_static = model_static.fit(X_train, \n","                                    y_train,\n","                                    batch_size=batch_size,\n","                                    epochs=epochs,\n","                                    validation_data=(X_validation, y_validation),\n","                                    shuffle=True)\n","  \n","  save_embedding(model_static, tokenizer, 'CNN-static', preprocessing, augmentation)\n","\n","  save_model(model_static, 'CNN-static', preprocessing, augmentation)\n","\n","  predicted_validation = (model_static.predict(X_validation) > 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_static, preprocessing, augmentation, 'CNN-static')\n","  \n","  return model_static, history_static, score"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O3f-PZSIBoaS"},"source":["## CNN non-static"]},{"cell_type":"code","metadata":{"id":"KC_AHFhvBq7h","executionInfo":{"status":"ok","timestamp":1629679215847,"user_tz":180,"elapsed":15,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def cnn_non_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=(length_size, ))\n","\n","  #embedding layer\n","  if preprocessing:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_preprocessing_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","  else:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","\n","  reshape = Reshape((length_size, embedding_dim, 1))(embedding)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution2D(filters=filters,\n","                        kernel_size=(size, embedding_dim),\n","                        activation=non_linearity_function,\n","                        kernel_regularizer=l2(l2_constraint))(reshape)\n","    \n","    pool = MaxPooling2D(strides=(1, 1),\n","                        pool_size=(2, 1),\n","                        padding='valid')(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_non_static = Model(inputs=input, outputs=output)\n","  model_non_static.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_non_static.summary()\n","\n","  history_non_static = model_non_static.fit(X_train, \n","                                            y_train,\n","                                            batch_size=batch_size,\n","                                            epochs=epochs,\n","                                            validation_data=(X_validation, y_validation),\n","                                            shuffle=True)\n","  \n","  save_embedding(model_non_static, tokenizer, 'CNN-non-static', preprocessing, augmentation)\n","\n","  save_model(model_non_static, 'CNN-non-static', preprocessing, augmentation)\n","\n","  predicted_validation = (model_non_static.predict(X_validation) > 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_non_static, preprocessing, augmentation, 'CNN-non-static')\n","\n","  return model_non_static, history_non_static, score"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Cg6enS3gDizi"},"source":["## Main"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xDxJkScXDlFI","executionInfo":{"status":"ok","timestamp":1629686183275,"user_tz":180,"elapsed":6967441,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"42fb8bea-3147-43f0-ca55-be915305701c"},"source":["use_augmentation = [False, True]\n","use_preprocessing = [False, True]\n","models_used = []\n","preprocessing_used = []\n","augmentation_used = []\n","scores_validation = []\n","models = ['rand', 'non_static']\n","\n","for model in models:\n","\n","  for aug in use_augmentation:\n","\n","    for prep in use_preprocessing:\n","\n","      if aug and prep:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(data_preprocessing_augmentation)\n","      elif aug and not prep:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(data_augmentation)\n","      elif prep and not aug:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(preprocessed_data)\n","      else:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(normal_data) \n","\n","      print('Modelo: {}\\nPré-processamento: {}\\nBalanceamento: {}\\n'.format(model, prep, aug))\n","\n","      if model == 'rand':\n","        m, history, validation_score = cnn_rand(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      elif model == 'static':\n","        m, history, validation_score = cnn_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      elif model == 'non_static':\n","        m, history, validation_score = cnn_non_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      else:\n","        print('Modelo não encontrado')\n","        break\n","        \n","      print('Modelo finalizado!\\n')\n","\n","      models_used.append(model)\n","      preprocessing_used.append(prep)\n","      augmentation_used.append(aug)\n","      scores_validation.append(validation_score)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Modelo: rand\n","Pré-processamento: False\n","Balanceamento: False\n","\n","Epoch 1/10\n","272/272 [==============================] - 65s 237ms/step - loss: 0.5376 - accuracy: 0.9281 - val_loss: 0.2517 - val_accuracy: 0.9306\n","Epoch 2/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.2407 - accuracy: 0.9297 - val_loss: 0.2279 - val_accuracy: 0.9306\n","Epoch 3/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.2029 - accuracy: 0.9298 - val_loss: 0.2172 - val_accuracy: 0.9306\n","Epoch 4/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.1750 - accuracy: 0.9330 - val_loss: 0.2156 - val_accuracy: 0.9337\n","Epoch 5/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.1663 - accuracy: 0.9395 - val_loss: 0.2400 - val_accuracy: 0.9445\n","Epoch 6/10\n","272/272 [==============================] - 64s 237ms/step - loss: 0.1561 - accuracy: 0.9510 - val_loss: 0.2091 - val_accuracy: 0.9464\n","Epoch 7/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.1342 - accuracy: 0.9595 - val_loss: 0.2150 - val_accuracy: 0.9499\n","Epoch 8/10\n","272/272 [==============================] - 64s 237ms/step - loss: 0.1274 - accuracy: 0.9657 - val_loss: 0.2271 - val_accuracy: 0.9412\n","Epoch 9/10\n","272/272 [==============================] - 64s 237ms/step - loss: 0.1195 - accuracy: 0.9710 - val_loss: 0.2243 - val_accuracy: 0.9489\n","Epoch 10/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.1128 - accuracy: 0.9751 - val_loss: 0.2323 - val_accuracy: 0.9504\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand/assets\n","Modelo finalizado!\n","\n","Modelo: rand\n","Pré-processamento: True\n","Balanceamento: False\n","\n","Epoch 1/10\n","251/251 [==============================] - 55s 217ms/step - loss: 0.5572 - accuracy: 0.9294 - val_loss: 0.2481 - val_accuracy: 0.9327\n","Epoch 2/10\n","251/251 [==============================] - 54s 216ms/step - loss: 0.2413 - accuracy: 0.9317 - val_loss: 0.2246 - val_accuracy: 0.9327\n","Epoch 3/10\n","251/251 [==============================] - 54s 215ms/step - loss: 0.1939 - accuracy: 0.9317 - val_loss: 0.2044 - val_accuracy: 0.9327\n","Epoch 4/10\n","251/251 [==============================] - 54s 215ms/step - loss: 0.1679 - accuracy: 0.9335 - val_loss: 0.2111 - val_accuracy: 0.9327\n","Epoch 5/10\n","251/251 [==============================] - 54s 216ms/step - loss: 0.1475 - accuracy: 0.9399 - val_loss: 0.2022 - val_accuracy: 0.9370\n","Epoch 6/10\n","251/251 [==============================] - 54s 215ms/step - loss: 0.1403 - accuracy: 0.9494 - val_loss: 0.2416 - val_accuracy: 0.9454\n","Epoch 7/10\n","251/251 [==============================] - 54s 216ms/step - loss: 0.1273 - accuracy: 0.9592 - val_loss: 0.1881 - val_accuracy: 0.9456\n","Epoch 8/10\n","251/251 [==============================] - 54s 215ms/step - loss: 0.1288 - accuracy: 0.9668 - val_loss: 0.2078 - val_accuracy: 0.9476\n","Epoch 9/10\n","251/251 [==============================] - 54s 214ms/step - loss: 0.1088 - accuracy: 0.9729 - val_loss: 0.1989 - val_accuracy: 0.9506\n","Epoch 10/10\n","251/251 [==============================] - 54s 213ms/step - loss: 0.1020 - accuracy: 0.9771 - val_loss: 0.2320 - val_accuracy: 0.9483\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand_preprocessing/assets\n","Modelo finalizado!\n","\n","Modelo: rand\n","Pré-processamento: False\n","Balanceamento: True\n","\n","Epoch 1/10\n","506/506 [==============================] - 121s 237ms/step - loss: 0.7203 - accuracy: 0.6711 - val_loss: 0.3286 - val_accuracy: 0.9151\n","Epoch 2/10\n","506/506 [==============================] - 120s 237ms/step - loss: 0.2395 - accuracy: 0.9463 - val_loss: 0.2154 - val_accuracy: 0.9545\n","Epoch 3/10\n","506/506 [==============================] - 119s 236ms/step - loss: 0.1657 - accuracy: 0.9712 - val_loss: 0.1710 - val_accuracy: 0.9668\n","Epoch 4/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.1264 - accuracy: 0.9815 - val_loss: 0.1443 - val_accuracy: 0.9752\n","Epoch 5/10\n","506/506 [==============================] - 119s 236ms/step - loss: 0.1288 - accuracy: 0.9829 - val_loss: 0.1250 - val_accuracy: 0.9834\n","Epoch 6/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.0978 - accuracy: 0.9880 - val_loss: 0.1100 - val_accuracy: 0.9836\n","Epoch 7/10\n","506/506 [==============================] - 118s 234ms/step - loss: 0.0937 - accuracy: 0.9893 - val_loss: 0.1711 - val_accuracy: 0.9714\n","Epoch 8/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.0837 - accuracy: 0.9904 - val_loss: 0.1269 - val_accuracy: 0.9810\n","Epoch 9/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.1076 - accuracy: 0.9906 - val_loss: 0.1183 - val_accuracy: 0.9805\n","Epoch 10/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.0691 - accuracy: 0.9930 - val_loss: 0.0932 - val_accuracy: 0.9843\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand_augmentantion/assets\n","Modelo finalizado!\n","\n","Modelo: rand\n","Pré-processamento: True\n","Balanceamento: True\n","\n","Epoch 1/10\n","468/468 [==============================] - 103s 218ms/step - loss: 0.8022 - accuracy: 0.5931 - val_loss: 0.3826 - val_accuracy: 0.9100\n","Epoch 2/10\n","468/468 [==============================] - 102s 219ms/step - loss: 0.2556 - accuracy: 0.9426 - val_loss: 0.1852 - val_accuracy: 0.9679\n","Epoch 3/10\n","468/468 [==============================] - 102s 218ms/step - loss: 0.1572 - accuracy: 0.9733 - val_loss: 0.1465 - val_accuracy: 0.9758\n","Epoch 4/10\n","468/468 [==============================] - 103s 220ms/step - loss: 0.1216 - accuracy: 0.9811 - val_loss: 0.1272 - val_accuracy: 0.9753\n","Epoch 5/10\n","468/468 [==============================] - 102s 217ms/step - loss: 0.0965 - accuracy: 0.9866 - val_loss: 0.1188 - val_accuracy: 0.9799\n","Epoch 6/10\n","468/468 [==============================] - 102s 218ms/step - loss: 0.1056 - accuracy: 0.9863 - val_loss: 0.1129 - val_accuracy: 0.9770\n","Epoch 7/10\n","468/468 [==============================] - 100s 214ms/step - loss: 0.0829 - accuracy: 0.9889 - val_loss: 0.1051 - val_accuracy: 0.9777\n","Epoch 8/10\n","468/468 [==============================] - 100s 213ms/step - loss: 0.0915 - accuracy: 0.9900 - val_loss: 0.1052 - val_accuracy: 0.9760\n","Epoch 9/10\n","468/468 [==============================] - 100s 213ms/step - loss: 0.0642 - accuracy: 0.9914 - val_loss: 0.0981 - val_accuracy: 0.9841\n","Epoch 10/10\n","468/468 [==============================] - 100s 213ms/step - loss: 0.0681 - accuracy: 0.9920 - val_loss: 0.1002 - val_accuracy: 0.9763\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand_preprocessing_augmentantion/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: False\n","Balanceamento: False\n","\n","Epoch 1/10\n","272/272 [==============================] - 65s 236ms/step - loss: 0.5424 - accuracy: 0.9272 - val_loss: 0.2587 - val_accuracy: 0.9306\n","Epoch 2/10\n","272/272 [==============================] - 64s 235ms/step - loss: 0.2576 - accuracy: 0.9297 - val_loss: 0.2377 - val_accuracy: 0.9306\n","Epoch 3/10\n","272/272 [==============================] - 64s 234ms/step - loss: 0.2336 - accuracy: 0.9300 - val_loss: 0.2629 - val_accuracy: 0.9306\n","Epoch 4/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.2134 - accuracy: 0.9342 - val_loss: 0.2340 - val_accuracy: 0.9360\n","Epoch 5/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.1960 - accuracy: 0.9419 - val_loss: 0.2366 - val_accuracy: 0.9395\n","Epoch 6/10\n","272/272 [==============================] - 63s 233ms/step - loss: 0.1896 - accuracy: 0.9514 - val_loss: 0.2669 - val_accuracy: 0.9437\n","Epoch 7/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.1797 - accuracy: 0.9585 - val_loss: 0.2389 - val_accuracy: 0.9464\n","Epoch 8/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.1712 - accuracy: 0.9649 - val_loss: 0.2497 - val_accuracy: 0.9508\n","Epoch 9/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.1622 - accuracy: 0.9709 - val_loss: 0.2442 - val_accuracy: 0.9504\n","Epoch 10/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.1574 - accuracy: 0.9738 - val_loss: 0.2723 - val_accuracy: 0.9518\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: True\n","Balanceamento: False\n","\n","Epoch 1/10\n","251/251 [==============================] - 54s 212ms/step - loss: 0.5617 - accuracy: 0.9306 - val_loss: 0.2634 - val_accuracy: 0.9327\n","Epoch 2/10\n","251/251 [==============================] - 53s 210ms/step - loss: 0.2633 - accuracy: 0.9317 - val_loss: 0.2584 - val_accuracy: 0.9327\n","Epoch 3/10\n","251/251 [==============================] - 52s 209ms/step - loss: 0.2430 - accuracy: 0.9317 - val_loss: 0.2558 - val_accuracy: 0.9327\n","Epoch 4/10\n","251/251 [==============================] - 52s 209ms/step - loss: 0.2171 - accuracy: 0.9325 - val_loss: 0.2468 - val_accuracy: 0.9350\n","Epoch 5/10\n","251/251 [==============================] - 52s 209ms/step - loss: 0.1993 - accuracy: 0.9384 - val_loss: 0.2408 - val_accuracy: 0.9402\n","Epoch 6/10\n","251/251 [==============================] - 53s 209ms/step - loss: 0.1854 - accuracy: 0.9466 - val_loss: 0.2333 - val_accuracy: 0.9397\n","Epoch 7/10\n","251/251 [==============================] - 52s 209ms/step - loss: 0.1697 - accuracy: 0.9569 - val_loss: 0.2553 - val_accuracy: 0.9456\n","Epoch 8/10\n","251/251 [==============================] - 52s 208ms/step - loss: 0.1648 - accuracy: 0.9642 - val_loss: 0.2132 - val_accuracy: 0.9449\n","Epoch 9/10\n","251/251 [==============================] - 52s 209ms/step - loss: 0.1540 - accuracy: 0.9703 - val_loss: 0.2276 - val_accuracy: 0.9497\n","Epoch 10/10\n","251/251 [==============================] - 52s 207ms/step - loss: 0.1462 - accuracy: 0.9741 - val_loss: 0.2605 - val_accuracy: 0.9521\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static_preprocessing/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: False\n","Balanceamento: True\n","\n","Epoch 1/10\n","506/506 [==============================] - 118s 232ms/step - loss: 0.6462 - accuracy: 0.7984 - val_loss: 0.3902 - val_accuracy: 0.9218\n","Epoch 2/10\n","506/506 [==============================] - 119s 236ms/step - loss: 0.2694 - accuracy: 0.9531 - val_loss: 0.2898 - val_accuracy: 0.9530\n","Epoch 3/10\n","506/506 [==============================] - 118s 233ms/step - loss: 0.2128 - accuracy: 0.9704 - val_loss: 0.2288 - val_accuracy: 0.9726\n","Epoch 4/10\n","506/506 [==============================] - 117s 230ms/step - loss: 0.1810 - accuracy: 0.9791 - val_loss: 0.2265 - val_accuracy: 0.9649\n","Epoch 5/10\n","506/506 [==============================] - 117s 231ms/step - loss: 0.1593 - accuracy: 0.9841 - val_loss: 0.2884 - val_accuracy: 0.9100\n","Epoch 6/10\n","506/506 [==============================] - 117s 231ms/step - loss: 0.1565 - accuracy: 0.9868 - val_loss: 0.1993 - val_accuracy: 0.9791\n","Epoch 7/10\n","506/506 [==============================] - 116s 230ms/step - loss: 0.1409 - accuracy: 0.9880 - val_loss: 0.1567 - val_accuracy: 0.9810\n","Epoch 8/10\n","506/506 [==============================] - 116s 230ms/step - loss: 0.1267 - accuracy: 0.9905 - val_loss: 0.2425 - val_accuracy: 0.9653\n","Epoch 9/10\n","506/506 [==============================] - 117s 230ms/step - loss: 0.4795 - accuracy: 0.9846 - val_loss: 0.1244 - val_accuracy: 0.9741\n","Epoch 10/10\n","506/506 [==============================] - 116s 230ms/step - loss: 0.0790 - accuracy: 0.9927 - val_loss: 0.1281 - val_accuracy: 0.9781\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static_augmentantion/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: True\n","Balanceamento: True\n","\n","Epoch 1/10\n","468/468 [==============================] - 101s 214ms/step - loss: 0.6430 - accuracy: 0.8200 - val_loss: 0.3352 - val_accuracy: 0.9420\n","Epoch 2/10\n","468/468 [==============================] - 102s 218ms/step - loss: 0.2750 - accuracy: 0.9574 - val_loss: 0.2318 - val_accuracy: 0.9685\n","Epoch 3/10\n","468/468 [==============================] - 101s 217ms/step - loss: 0.2885 - accuracy: 0.9711 - val_loss: 0.1733 - val_accuracy: 0.9704\n","Epoch 4/10\n","468/468 [==============================] - 104s 222ms/step - loss: 0.1402 - accuracy: 0.9829 - val_loss: 0.1532 - val_accuracy: 0.9714\n","Epoch 5/10\n","468/468 [==============================] - 112s 239ms/step - loss: 0.1417 - accuracy: 0.9849 - val_loss: 0.1446 - val_accuracy: 0.9769\n","Epoch 6/10\n","468/468 [==============================] - 110s 234ms/step - loss: 0.2098 - accuracy: 0.9846 - val_loss: 0.1363 - val_accuracy: 0.9736\n","Epoch 7/10\n","468/468 [==============================] - 109s 233ms/step - loss: 0.1077 - accuracy: 0.9892 - val_loss: 0.1491 - val_accuracy: 0.9726\n","Epoch 8/10\n","468/468 [==============================] - 108s 230ms/step - loss: 0.1025 - accuracy: 0.9907 - val_loss: 0.1313 - val_accuracy: 0.9807\n","Epoch 9/10\n","468/468 [==============================] - 107s 229ms/step - loss: 0.5259 - accuracy: 0.9839 - val_loss: 0.1895 - val_accuracy: 0.9736\n","Epoch 10/10\n","468/468 [==============================] - 106s 227ms/step - loss: 0.0704 - accuracy: 0.9926 - val_loss: 0.1037 - val_accuracy: 0.9824\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static_preprocessing_augmentantion/assets\n","Modelo finalizado!\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4PJDAY2JDlIm","executionInfo":{"status":"ok","timestamp":1629686183279,"user_tz":180,"elapsed":50,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["results = pd.DataFrame()\n","results['modelo'] = models_used\n","results['pré_processamento'] = preprocessing_used\n","results['balanceamento'] = augmentation_used\n","results['score_validação'] = scores_validation"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"C0wXkrN4rMUd","executionInfo":{"status":"ok","timestamp":1629686183281,"user_tz":180,"elapsed":36,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["results.to_csv('resultados_textCNN2D.csv', index=False)"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"54rzghrL3jNS","executionInfo":{"status":"ok","timestamp":1629686302068,"user_tz":180,"elapsed":84598,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"c64634a4-ed89-42ae-d59e-478be7bed4df"},"source":["!zip -r /content/model.zip /content/Model"],"execution_count":25,"outputs":[{"output_type":"stream","text":["  adding: content/Model/ (stored 0%)\n","  adding: content/Model/model_CNN-rand/ (stored 0%)\n","  adding: content/Model/model_CNN-rand/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-rand/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-rand/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-rand/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-rand/variables/variables.data-00000-of-00001 (deflated 19%)\n","  adding: content/Model/model_CNN-rand/variables/variables.index (deflated 66%)\n","  adding: content/Model/embedding_CNN-rand_preprocessing_augmentantion.pickle (deflated 9%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/variables/variables.data-00000-of-00001 (deflated 13%)\n","  adding: content/Model/model_CNN-rand_preprocessing_augmentantion/variables/variables.index (deflated 66%)\n","  adding: content/Model/model_CNN-rand_augmentantion/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_augmentantion/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-rand_augmentantion/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_augmentantion/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-rand_augmentantion/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_augmentantion/variables/variables.data-00000-of-00001 (deflated 18%)\n","  adding: content/Model/model_CNN-rand_augmentantion/variables/variables.index (deflated 66%)\n","  adding: content/Model/embedding_CNN-rand_augmentantion.pickle (deflated 9%)\n","  adding: content/Model/embedding_CNN-rand.pickle (deflated 9%)\n","  adding: content/Model/model_CNN-non-static/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static/saved_model.pb (deflated 90%)\n","  adding: content/Model/model_CNN-non-static/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-non-static/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static/variables/variables.data-00000-of-00001 (deflated 23%)\n","  adding: content/Model/model_CNN-non-static/variables/variables.index (deflated 66%)\n","  adding: content/Model/embedding_CNN-non-static.pickle (deflated 23%)\n","  adding: content/Model/embedding_CNN-rand_preprocessing.pickle (deflated 9%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/variables/variables.data-00000-of-00001 (deflated 15%)\n","  adding: content/Model/model_CNN-non-static_preprocessing/variables/variables.index (deflated 66%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/variables/variables.data-00000-of-00001 (deflated 15%)\n","  adding: content/Model/model_CNN-non-static_preprocessing_augmentantion/variables/variables.index (deflated 66%)\n","  adding: content/Model/embedding_CNN-non-static_augmentantion.pickle (deflated 24%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/variables/variables.data-00000-of-00001 (deflated 23%)\n","  adding: content/Model/model_CNN-non-static_augmentantion/variables/variables.index (deflated 66%)\n","  adding: content/Model/embedding_CNN-non-static_preprocessing_augmentantion.pickle (deflated 17%)\n","  adding: content/Model/embedding_CNN-non-static_preprocessing.pickle (deflated 16%)\n","  adding: content/Model/model_CNN-rand_preprocessing/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_preprocessing/saved_model.pb (deflated 89%)\n","  adding: content/Model/model_CNN-rand_preprocessing/assets/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_preprocessing/keras_metadata.pb (deflated 91%)\n","  adding: content/Model/model_CNN-rand_preprocessing/variables/ (stored 0%)\n","  adding: content/Model/model_CNN-rand_preprocessing/variables/variables.data-00000-of-00001 (deflated 13%)\n","  adding: content/Model/model_CNN-rand_preprocessing/variables/variables.index (deflated 66%)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"1-ol8-ON3lyy","executionInfo":{"status":"ok","timestamp":1629686302073,"user_tz":180,"elapsed":32,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"e0ab5fee-1cbf-4ba7-c9d3-8f8486488b4b"},"source":["from google.colab import files\n","files.download(\"/content/model.zip\")"],"execution_count":26,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_392dbb4e-3b75-4c1e-bb89-10802c2ab26d\", \"model.zip\", 1391679653)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"u8d45Vi10XSX"},"source":["## Referências"]},{"cell_type":"markdown","metadata":{"id":"N3-LaAxV0WJw"},"source":["https://www.kaggle.com/hamishdickson/cnn-for-sentence-classification-by-yoon-kim\n","\n","https://github.com/pinkeshbadjatiya/twitter-hatespeech/blob/master/cnn.py\n","\n","https://github.com/alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras/blob/master/sentiment_cnn.py\n","\n","https://github.com/satya-thirumani/Python/blob/master/Sentiment%20Analysis/AV_practice_problem_Twitter_Sentiment_Analysis.ipynb\n","\n","https://github.com/yoonkim/CNN_sentence/blob/23e0e1f7355705bb083043fda05c031b15acb38c/conv_net_classes.py#L340\n","\n","https://github.com/Jverma/cnn-text-classification-keras/blob/master/text_cnn.py\n","\n","https://github.com/bentrevett/pytorch-sentiment-analysis/blob/master/4%20-%20Convolutional%20Sentiment%20Analysis.ipynb\n","\n","https://github.com/dennybritz/cnn-text-classification-tf/blob/master/text_cnn.py"]}]}