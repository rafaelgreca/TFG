{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TextCNN_1D","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNgWdsFZotMCS57R1JM8whs"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"MvrZGmWA8LQG","executionInfo":{"status":"ok","timestamp":1629683254466,"user_tz":180,"elapsed":31892,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["%%capture\n","!pip install pandas\n","!pip install numpy\n","!pip install tensorflow\n","!pip install keras\n","!pip install sklearn\n","!pip install matplotlib\n","!pip install seaborn\n","!pip install unidecode\n","!pip install -U imbalanced-learn\n","!pip3 install pickle5"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jbkU3YVN8Pwd","executionInfo":{"status":"ok","timestamp":1629683261321,"user_tz":180,"elapsed":6872,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"083deedb-f184-464c-f985-f3b948dc41fc"},"source":["import tensorflow as tf\n","import pandas as pd\n","import warnings\n","import unidecode\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pickle5 as pickle\n","import random\n","import re\n","import nltk\n","nltk.download('stopwords')\n","\n","from imblearn.over_sampling import RandomOverSampler\n","from nltk.corpus import stopwords\n","from sklearn.model_selection import train_test_split\n","from tensorflow import keras\n","from keras.models import Sequential, Model\n","from keras.layers import Reshape, Dense, Dropout, Flatten, Input, MaxPooling1D, Convolution1D, Embedding, Concatenate\n","from keras.regularizers import l2\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from sklearn.metrics import f1_score\n","\n","sw = set(stopwords.words('english'))\n","random.seed(23)\n","warnings.filterwarnings('ignore')\n","np.random.seed(23)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fbIsBrCP1iMA"},"source":["## Preprocessing"]},{"cell_type":"code","metadata":{"id":"DVGCip5q1hla","executionInfo":{"status":"ok","timestamp":1629683261725,"user_tz":180,"elapsed":413,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def remove_username(text):\n","  text = re.sub(r'\\@[^\\s]+', ' ', text)\n","  return text\n","\n","def remove_newline(text):\n","  text = text.replace('\\n', ' ')\n","  return text\n","\n","def only_letters(text):\n","  text = re.sub(r'[^a-záâàãéêèẽíìîĩóòõôúùũû\\s]+', ' ', text)\n","  return text\n","\n","def remove_link(text):\n","  text = re.sub(r'www\\.?[^\\s]+', ' ', text)\n","  return text\n","\n","def remove_hyperlink(text):\n","  text = re.sub(r'\\<.?\\>', ' ', text)\n","  return text\n","\n","def remove_accent(text):\n","  text = unidecode.unidecode(text)\n","  return text\n","\n","def adjustment_text(text):\n","  text = re.sub(r'\\s+', ' ', text)\n","  text = text.strip()\n","  return text\n","\n","def remove_stopwords(text):\n","  text = [word for word in text.split() if word not in sw]\n","  text = ' '.join(text)\n","  return text\n","\n","def remove_spam(text):\n","  text = re.sub(r'\\&amp', ' ', text)\n","  text = re.sub(r'\\&lt', ' ', text)\n","  text = re.sub(r'\\&gt', ' ', text)\n","  text = re.sub(r'\\#follow|\\#followme|\\#like|\\#f4f|\\#photooftheday', ' ', text)\n","  return text\n","\n","def remove_slangs(text):\n","  text = re.sub(r' b4 ', ' before ', text)\n","  text = re.sub(r' 2b ', ' to be ', text)\n","  text = re.sub(r' 2morrow ', ' tomorrow ', text)\n","  text = re.sub(r' rn ', ' right now ', text)\n","  text = re.sub(r' brb ', ' be right back ', text)\n","  text = re.sub(r' mb ', ' my bad ', text)\n","  text = re.sub(r' luv ', ' love ', text)\n","  text = re.sub(r' b ', ' be ', text)\n","  text = re.sub(r' r ', ' are ', text)\n","  text = re.sub(r' u ', ' you ', text)\n","  text = re.sub(r' y ', ' why ', text)\n","  text = re.sub(r' ur ', ' your ', text)\n","  text = re.sub(r' hbd ', ' happy birthday ', text)\n","  text = re.sub(r' bday ', ' birthday ', text)\n","  text = re.sub(r' bihday ', ' birthday ', text)\n","  text = re.sub(r' omg ', ' oh my god ', text)\n","  text = re.sub(r' lol ', ' laughing out loud ', text)\n","  return text\n","\n","def remove_abbreviations(text):\n","  text = re.sub(r\" can\\'t \", \" can not \", text)\n","  text = re.sub(r\" i\\'m \", \" i am \", text)\n","  text = re.sub(r\" i\\'ll \", \" i will \", text)\n","  text = re.sub(r\" i\\'d \", \" i would \", text)\n","  text = re.sub(r\" i\\'ve \", \" i have \", text)\n","  text = re.sub(r\" ain\\'t \", \" am not \", text)\n","  text = re.sub(r\" haven\\'t \", \" have not \", text)\n","  text = re.sub(r\" hasn\\'t \", \" has not \", text)\n","  text = re.sub(r\" can\\'t \", \" can not \", text)\n","  text = re.sub(r\" won\\'t \", \" will not \", text)\n","  text = re.sub(r\" you\\'re \", \" you are \", text)\n","  text = re.sub(r\" we\\'re \", \" we are \", text)\n","  text = re.sub(r\" they\\'re \", \" they are \", text)\n","  text = re.sub(r\" he\\'s \", \" he is \", text)\n","  text = re.sub(r\" she\\'s \", \" she is \", text)\n","  text = re.sub(r\" it\\'s \", \" it is \", text)\n","  text = re.sub(r\" don\\'t \", \" do not \", text)\n","  text = re.sub(r\" doesn\\'t \", \" does not \", text)\n","  text = re.sub(r\" wouldn\\'t \", \" would not \", text)\n","  text = re.sub(r\" couldn\\'t \", \" could not \", text)\n","  text = re.sub(r\" shouldn\\'t \", \" should not \", text)\n","  return text\n","\n","def remove_one_len_word(text):\n","  text = re.sub(r'\\b[a-z]\\b', ' ', text)\n","  return text\n","\n","def preprocessing(data):\n","  data['cleaned_tweet'] = data['tweet'].apply(str)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(lambda x: x.lower())\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_newline)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_hyperlink)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_spam)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_link)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_username)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_abbreviations)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(only_letters)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_accent)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_slangs)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_stopwords)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_one_len_word)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(adjustment_text)\n","  return data"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wM2uoJUZ8oVr"},"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0PRNAa9_-qIM","executionInfo":{"status":"ok","timestamp":1629683261727,"user_tz":180,"elapsed":43,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"f0c4b909-f9b8-4881-8a4c-734684e2f608"},"source":["normal_data = pd.read_csv('Data/train.csv')\n","normal_data = normal_data.drop(columns=['id'])\n","normal_data.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>tweet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>@user when a father is dysfunctional and is s...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>@user @user thanks for #lyft credit i can't us...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>bihday your majesty</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>#model   i love u take with u all the time in ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>factsguide: society now    #motivation</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   label                                              tweet\n","0      0   @user when a father is dysfunctional and is s...\n","1      0  @user @user thanks for #lyft credit i can't us...\n","2      0                                bihday your majesty\n","3      0  #model   i love u take with u all the time in ...\n","4      0             factsguide: society now    #motivation"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iv3WqTC3kKPP","executionInfo":{"status":"ok","timestamp":1629683261729,"user_tz":180,"elapsed":35,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"a6146ba7-4431-4736-85f8-6ef3d55982d0"},"source":["normal_data.shape"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(31962, 2)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YWsDE9A2kD_u","executionInfo":{"status":"ok","timestamp":1629683261731,"user_tz":180,"elapsed":30,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"f1f7fe1d-7785-40c9-b9aa-361f215c7bb4"},"source":["ros = RandomOverSampler(random_state=23, sampling_strategy='minority')\n","X_resampled, y_resampled = ros.fit_resample(normal_data[['tweet']], normal_data['label'])\n","data_augmentation = pd.concat([X_resampled, y_resampled], axis=1)\n","data_augmentation.head()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>@user when a father is dysfunctional and is s...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>@user @user thanks for #lyft credit i can't us...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>bihday your majesty</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>#model   i love u take with u all the time in ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>factsguide: society now    #motivation</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                               tweet  label\n","0   @user when a father is dysfunctional and is s...      0\n","1  @user @user thanks for #lyft credit i can't us...      0\n","2                                bihday your majesty      0\n","3  #model   i love u take with u all the time in ...      0\n","4             factsguide: society now    #motivation      0"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"szfpHt7rzTIb","executionInfo":{"status":"ok","timestamp":1629683261733,"user_tz":180,"elapsed":26,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"69bb57e2-644d-42fd-8119-ad509ea6dad4"},"source":["data_augmentation.shape"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(59440, 2)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2Y4K9Bt11Zeu","executionInfo":{"status":"ok","timestamp":1629683265160,"user_tz":180,"elapsed":3449,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"f0c158fd-52da-4ad3-ad62-20cc7a1ad6df"},"source":["preprocessed_data = normal_data.copy()\n","preprocessed_data = preprocessing(preprocessed_data)\n","preprocessed_data = preprocessed_data.replace('None', pd.NA)\n","preprocessed_data = preprocessed_data.dropna()\n","preprocessed_data = preprocessed_data.drop_duplicates()\n","preprocessed_data = preprocessed_data.drop(columns=['tweet'])\n","preprocessed_data = preprocessed_data.rename(columns={'cleaned_tweet': 'tweet'})\n","preprocessed_data.head()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>tweet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>father dysfunctional selfish drags kids dysfun...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>thanks lyft credit use cause offer wheelchair ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>birthday majesty</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>model love take time</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>factsguide society motivation</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   label                                              tweet\n","0      0  father dysfunctional selfish drags kids dysfun...\n","1      0  thanks lyft credit use cause offer wheelchair ...\n","2      0                                   birthday majesty\n","3      0                               model love take time\n","4      0                      factsguide society motivation"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTkLD9L4zM0Z","executionInfo":{"status":"ok","timestamp":1629683265163,"user_tz":180,"elapsed":28,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"24d45d84-eb32-4fe5-e35e-6f8d9efc87f0"},"source":["preprocessed_data.shape"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(29530, 2)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hebFvYTaBpAG","executionInfo":{"status":"ok","timestamp":1629683265165,"user_tz":180,"elapsed":25,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"3f5f819d-6fa1-40e4-85f9-af6fa9bd3997"},"source":["ros = RandomOverSampler(random_state=23, sampling_strategy='minority')\n","X_resampled, y_resampled = ros.fit_resample(preprocessed_data[['tweet']], preprocessed_data['label'])\n","data_preprocessing_augmentation = pd.concat([X_resampled, y_resampled], axis=1)\n","data_preprocessing_augmentation.head()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>father dysfunctional selfish drags kids dysfun...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>thanks lyft credit use cause offer wheelchair ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>birthday majesty</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>model love take time</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>factsguide society motivation</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                               tweet  label\n","0  father dysfunctional selfish drags kids dysfun...      0\n","1  thanks lyft credit use cause offer wheelchair ...      0\n","2                                   birthday majesty      0\n","3                               model love take time      0\n","4                      factsguide society motivation      0"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q1gSgHkFzPOt","executionInfo":{"status":"ok","timestamp":1629683265168,"user_tz":180,"elapsed":21,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}},"outputId":"6425ee87-2cb6-4608-9843-90303da44062"},"source":["data_preprocessing_augmentation.shape"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(55034, 2)"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"iCpQSNEE7wlo"},"source":["## Word2vec"]},{"cell_type":"code","metadata":{"id":"HmVKbyWJ7y1W","executionInfo":{"status":"ok","timestamp":1629683268308,"user_tz":180,"elapsed":3157,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["with open(r\"Data/word2vec.pickle\", \"rb\") as output_file:\n","    word2vec_embedding = pickle.load(output_file)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"Df2gQAxIsteF","executionInfo":{"status":"ok","timestamp":1629683271070,"user_tz":180,"elapsed":2766,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["with open(r\"Data/word2vec_preprocessing.pickle\", \"rb\") as output_file:\n","    word2vec_preprocessing_embedding = pickle.load(output_file)"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2tnMZB6L9Cwf"},"source":["## Parameters"]},{"cell_type":"code","metadata":{"id":"RLPjaO0_9HRS","executionInfo":{"status":"ok","timestamp":1629683271085,"user_tz":180,"elapsed":46,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["non_linearity_function = 'relu'\n","kernel_size = [3, 4, 5]\n","filters = 100\n","dropout_rate = 0.5\n","l2_constraint = 3\n","epochs = 10\n","batch_size = 100\n","embedding_dim = 300\n","length_size = 10"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xgf0e9zIM_Ee"},"source":["## Tokenization + padding + splitting data step"]},{"cell_type":"code","metadata":{"id":"wQ6cy3KnF4s_","executionInfo":{"status":"ok","timestamp":1629683271087,"user_tz":180,"elapsed":39,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def preprocessing_step(data):\n","  tokenizer = Tokenizer()\n","  tokenizer.fit_on_texts(data['tweet'].values)\n","  data['tokenized'] = tokenizer.texts_to_sequences(data['tweet'].values)\n","\n","  vocab_size = len(tokenizer.word_index) + 1\n","\n","  X = pad_sequences(sequences = data['tokenized'],\n","                  maxlen = length_size,\n","                  padding = 'post')\n","\n","  y = data['label']\n","\n","  X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.15, random_state=23)\n","\n","  return vocab_size, tokenizer, X_train, X_validation, y_train, y_validation"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Raq3KN353mxO"},"source":["## Predict"]},{"cell_type":"code","metadata":{"id":"dSZq35fD3lTY","executionInfo":{"status":"ok","timestamp":1629683271089,"user_tz":180,"elapsed":34,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def predict(tokenizer, model, prep, augmentation, nome):\n","\n","  test = pd.read_csv('Data/test.csv')\n","\n","  if prep:\n","    test = preprocessing(test)\n","    test['tokenized'] = tokenizer.texts_to_sequences(test['cleaned_tweet'].values)\n","  else:\n","    test['tokenized'] = tokenizer.texts_to_sequences(test['tweet'].values)\n","\n","  X_test = pad_sequences(sequences = test['tokenized'],\n","                         maxlen = length_size,\n","                         padding = 'post')\n","\n","  predicted = (model.predict(X_test) > 0.5).astype(\"int32\")\n","  prediction = pd.DataFrame()\n","  prediction['id'] = test['id']\n","  prediction['label'] = predicted\n","\n","  if prep:\n","\n","    if augmentation:\n","      prediction.to_csv('Submission/' + nome + '_preprocessing_augmentation.csv', index=False)\n","    else:\n","      prediction.to_csv('Submission/' + nome + '_preprocessing.csv', index=False)\n","\n","  else:\n","\n","    if augmentation:\n","      prediction.to_csv('Submission/' + nome + '_augmentation.csv', index=False)\n","    else:\n","      prediction.to_csv('Submission/' + nome + '.csv', index=False)"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KmfpDUot3oyv"},"source":["## Save Models"]},{"cell_type":"code","metadata":{"id":"_ou2_2Zq3o7f","executionInfo":{"status":"ok","timestamp":1629683271090,"user_tz":180,"elapsed":32,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def save_model(modelo, nome_modelo, preprocessing, augmentation):\n","  \n","  file_name = 'model_'\n","\n","  if preprocessing:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_preprocessing_augmentantion'\n","    else:\n","      file_name = file_name + nome_modelo + '_preprocessing'\n","  else:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_augmentantion'\n","    else:\n","      file_name = file_name + nome_modelo\n","\n","  modelo.save('Model/' + file_name)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PWYmZv062f_D"},"source":["## Save embeddings"]},{"cell_type":"code","metadata":{"id":"xtMYplLE2gPS","executionInfo":{"status":"ok","timestamp":1629683271092,"user_tz":180,"elapsed":32,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def save_embedding(modelo, tokenizer, nome_modelo, preprocessing, augmentation):\n","  embeddings = modelo.get_layer('embedding').get_weights()[0]\n","  w2v_my = {}\n","\n","  for word, index in tokenizer.word_index.items():\n","      w2v_my[word] = embeddings[index]\n","  \n","  file_name = 'embedding_'\n","\n","  if preprocessing:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_preprocessing_augmentantion.pickle'\n","    else:\n","      file_name = file_name + nome_modelo + '_preprocessing.pickle'\n","  else:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_augmentantion.pickle'\n","    else:\n","      file_name = file_name + nome_modelo + '.pickle'\n","\n","  with open('Model/' + file_name, 'wb') as handle:\n","    pickle.dump(w2v_my, handle, protocol=pickle.HIGHEST_PROTOCOL)"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Xn-bmRXK8fwV"},"source":["## CNN-rand"]},{"cell_type":"code","metadata":{"id":"9A-7AYJW8fMI","executionInfo":{"status":"ok","timestamp":1629683271093,"user_tz":180,"elapsed":31,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def cnn_rand(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=length_size)\n","\n","  #embedding layer\n","  embedding = Embedding(input_dim=vocab_size,\n","                        output_dim=embedding_dim,\n","                        input_length=length_size,\n","                        name='embedding')(input)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution1D(filters=filters,\n","                         kernel_size=size,\n","                         activation=non_linearity_function,\n","                         padding='same',\n","                         kernel_regularizer=l2(l2_constraint))(embedding)\n","    \n","    pool = MaxPooling1D(strides=1,\n","                        pool_size=2,\n","                        padding=\"valid\")(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_random = Model(inputs=input, outputs=output)\n","  model_random.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_random.summary()\n","\n","  history_random = model_random.fit(X_train, \n","                                    y_train,\n","                                    batch_size=batch_size,\n","                                    epochs=epochs,\n","                                    validation_data=(X_validation, y_validation),\n","                                    shuffle=True)\n","  \n","  save_embedding(model_random, tokenizer, 'CNN-rand', preprocessing, augmentation)\n","\n","  save_model(model_random, 'CNN-rand', preprocessing, augmentation)\n","\n","  predicted_validation = (model_random.predict(X_validation) > 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_random, preprocessing, augmentation, 'CNN-rand')\n","  \n","  return model_random, history_random, score"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CI9jb9a40sWZ"},"source":["## CNN-static"]},{"cell_type":"code","metadata":{"id":"JDx6XooT0ulS","executionInfo":{"status":"ok","timestamp":1629683271094,"user_tz":180,"elapsed":29,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def cnn_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=length_size)\n","\n","  #embedding\n","  if preprocessing:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_preprocessing_embedding],\n","                          trainable=False,\n","                          name='embedding')(input)\n","  else:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_embedding],\n","                          trainable=False,\n","                          name='embedding')(input)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution1D(filters=filters,\n","                         kernel_size=size,\n","                         activation=non_linearity_function,\n","                         padding='same',\n","                         kernel_regularizer=l2(l2_constraint))(embedding)\n","    \n","    pool = MaxPooling1D(strides=1,\n","                        pool_size=2,\n","                        padding=\"valid\")(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_static = Model(inputs=input, outputs=output)\n","  model_static.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_static.summary()\n","\n","  history_static = model_static.fit(X_train, \n","                                    y_train,\n","                                    batch_size=batch_size,\n","                                    epochs=epochs,\n","                                    validation_data=(X_validation, y_validation),\n","                                    shuffle=True)\n","  \n","  save_embedding(model_static, tokenizer, 'CNN-static', preprocessing, augmentation)\n","\n","  save_model(model_static, 'CNN-static', preprocessing, augmentation)\n","\n","  predicted_validation = (model_static.predict(X_validation) > 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_static, preprocessing, augmentation, 'CNN-static')\n","  \n","  return model_static, history_static, score"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O3f-PZSIBoaS"},"source":["## CNN non-static"]},{"cell_type":"code","metadata":{"id":"KC_AHFhvBq7h","executionInfo":{"status":"ok","timestamp":1629683271448,"user_tz":180,"elapsed":381,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"}}},"source":["def cnn_non_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=length_size)\n","\n","  #embedding layer\n","  if preprocessing:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_preprocessing_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","  else:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution1D(filters=filters,\n","                         kernel_size=size,\n","                         activation=non_linearity_function,\n","                         padding='same',\n","                         kernel_regularizer=l2(l2_constraint))(embedding)\n","    \n","    pool = MaxPooling1D(strides=1,\n","                        pool_size=2,\n","                        padding=\"valid\")(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_non_static = Model(inputs=input, outputs=output)\n","  model_non_static.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_non_static.summary()\n","\n","  history_non_static = model_non_static.fit(X_train, \n","                                            y_train,\n","                                            batch_size=batch_size,\n","                                            epochs=epochs,\n","                                            validation_data=(X_validation, y_validation),\n","                                            shuffle=True)\n","  \n","  save_embedding(model_non_static, tokenizer, 'CNN-non-static', preprocessing, augmentation)\n","\n","  save_model(model_non_static, 'CNN-non-static', preprocessing, augmentation)\n","\n","  predicted_validation = (model_non_static.predict(X_validation) > 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_non_static, preprocessing, augmentation, 'CNN-non-static')\n","\n","  return model_non_static, history_non_static, score"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Cg6enS3gDizi"},"source":["## Main"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xDxJkScXDlFI","outputId":"522d211a-7f65-4eae-93c6-d8f1837e103d"},"source":["use_augmentation = [False, True]\n","use_preprocessing = [False, True]\n","models_used = []\n","preprocessing_used = []\n","augmentation_used = []\n","scores_validation = []\n","models = ['rand', 'non_static']\n","\n","for model in models:\n","\n","  for aug in use_augmentation:\n","\n","    for prep in use_preprocessing:\n","\n","      if aug and prep:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(data_preprocessing_augmentation)\n","      elif aug and not prep:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(data_augmentation)\n","      elif prep and not aug:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(preprocessed_data)\n","      else:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(normal_data) \n","\n","      print('Modelo: {}\\nPré-processamento: {}\\nBalanceamento: {}\\n'.format(model, prep, aug))\n","\n","      if model == 'rand':\n","        m, history, validation_score = cnn_rand(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      elif model == 'static':\n","        m, history, validation_score = cnn_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      elif model == 'non_static':\n","        m, history, validation_score = cnn_non_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      else:\n","        print('Modelo não encontrado')\n","        break\n","        \n","      print('Modelo finalizado!\\n')\n","\n","      models_used.append(model)\n","      preprocessing_used.append(prep)\n","      augmentation_used.append(aug)\n","      scores_validation.append(validation_score)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Modelo: rand\n","Pré-processamento: False\n","Balanceamento: False\n","\n","Epoch 1/10\n","272/272 [==============================] - 75s 272ms/step - loss: 86.7997 - accuracy: 0.9290 - val_loss: 0.2525 - val_accuracy: 0.9306\n","Epoch 2/10\n","272/272 [==============================] - 74s 271ms/step - loss: 0.2549 - accuracy: 0.9297 - val_loss: 0.2519 - val_accuracy: 0.9306\n","Epoch 3/10\n","272/272 [==============================] - 74s 273ms/step - loss: 0.2521 - accuracy: 0.9297 - val_loss: 0.2472 - val_accuracy: 0.9306\n","Epoch 4/10\n","272/272 [==============================] - 74s 272ms/step - loss: 0.2174 - accuracy: 0.9297 - val_loss: 0.1966 - val_accuracy: 0.9306\n","Epoch 5/10\n","272/272 [==============================] - 73s 268ms/step - loss: 0.1562 - accuracy: 0.9351 - val_loss: 0.1750 - val_accuracy: 0.9362\n","Epoch 6/10\n","272/272 [==============================] - 73s 267ms/step - loss: 0.1290 - accuracy: 0.9503 - val_loss: 0.1722 - val_accuracy: 0.9474\n","Epoch 7/10\n","272/272 [==============================] - 73s 270ms/step - loss: 0.1125 - accuracy: 0.9616 - val_loss: 0.1745 - val_accuracy: 0.9527\n","Epoch 8/10\n","272/272 [==============================] - 73s 269ms/step - loss: 0.1003 - accuracy: 0.9715 - val_loss: 0.1837 - val_accuracy: 0.9558\n","Epoch 9/10\n","272/272 [==============================] - 73s 268ms/step - loss: 0.0930 - accuracy: 0.9780 - val_loss: 0.1771 - val_accuracy: 0.9545\n","Epoch 10/10\n","272/272 [==============================] - 73s 267ms/step - loss: 0.0867 - accuracy: 0.9816 - val_loss: 0.1787 - val_accuracy: 0.9560\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand/assets\n","Modelo finalizado!\n","\n","Modelo: rand\n","Pré-processamento: True\n","Balanceamento: False\n","\n","Epoch 1/10\n","251/251 [==============================] - 62s 243ms/step - loss: 94.0293 - accuracy: 0.9282 - val_loss: 0.2479 - val_accuracy: 0.9327\n","Epoch 2/10\n","251/251 [==============================] - 60s 239ms/step - loss: 0.2499 - accuracy: 0.9317 - val_loss: 0.2466 - val_accuracy: 0.9327\n","Epoch 3/10\n","251/251 [==============================] - 60s 238ms/step - loss: 0.2494 - accuracy: 0.9317 - val_loss: 0.2464 - val_accuracy: 0.9327\n","Epoch 4/10\n","251/251 [==============================] - 60s 239ms/step - loss: 0.2427 - accuracy: 0.9317 - val_loss: 0.2331 - val_accuracy: 0.9327\n","Epoch 5/10\n","251/251 [==============================] - 60s 238ms/step - loss: 0.1866 - accuracy: 0.9318 - val_loss: 0.1873 - val_accuracy: 0.9330\n","Epoch 6/10\n","251/251 [==============================] - 60s 238ms/step - loss: 0.1375 - accuracy: 0.9387 - val_loss: 0.1735 - val_accuracy: 0.9402\n","Epoch 7/10\n","251/251 [==============================] - 60s 240ms/step - loss: 0.1164 - accuracy: 0.9532 - val_loss: 0.1713 - val_accuracy: 0.9433\n","Epoch 8/10\n","251/251 [==============================] - 60s 240ms/step - loss: 0.1024 - accuracy: 0.9654 - val_loss: 0.1745 - val_accuracy: 0.9490\n","Epoch 9/10\n","251/251 [==============================] - 60s 238ms/step - loss: 0.0926 - accuracy: 0.9737 - val_loss: 0.1752 - val_accuracy: 0.9515\n","Epoch 10/10\n","251/251 [==============================] - 60s 239ms/step - loss: 0.0846 - accuracy: 0.9803 - val_loss: 0.1822 - val_accuracy: 0.9533\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand_preprocessing/assets\n","Modelo finalizado!\n","\n","Modelo: rand\n","Pré-processamento: False\n","Balanceamento: True\n","\n","Epoch 1/10\n","506/506 [==============================] - 139s 272ms/step - loss: 47.1365 - accuracy: 0.7809 - val_loss: 0.2301 - val_accuracy: 0.9521\n","Epoch 2/10\n","506/506 [==============================] - 134s 265ms/step - loss: 0.1594 - accuracy: 0.9734 - val_loss: 0.1712 - val_accuracy: 0.9690\n","Epoch 3/10\n","506/506 [==============================] - 134s 265ms/step - loss: 0.1006 - accuracy: 0.9878 - val_loss: 0.1588 - val_accuracy: 0.9720\n","Epoch 4/10\n","506/506 [==============================] - 134s 264ms/step - loss: 0.0906 - accuracy: 0.9911 - val_loss: 0.0950 - val_accuracy: 0.9868\n","Epoch 5/10\n","506/506 [==============================] - 134s 264ms/step - loss: 0.1002 - accuracy: 0.9926 - val_loss: 0.0860 - val_accuracy: 0.9849\n","Epoch 6/10\n","506/506 [==============================] - 134s 264ms/step - loss: 0.0621 - accuracy: 0.9952 - val_loss: 0.1601 - val_accuracy: 0.9772\n","Epoch 7/10\n","506/506 [==============================] - 133s 263ms/step - loss: 0.1395 - accuracy: 0.9942 - val_loss: 4.2196 - val_accuracy: 0.9817\n","Epoch 8/10\n","506/506 [==============================] - 133s 263ms/step - loss: 0.4924 - accuracy: 0.9903 - val_loss: 0.1039 - val_accuracy: 0.9754\n","Epoch 9/10\n","506/506 [==============================] - 134s 264ms/step - loss: 0.0377 - accuracy: 0.9974 - val_loss: 0.0736 - val_accuracy: 0.9860\n","Epoch 10/10\n","506/506 [==============================] - 134s 264ms/step - loss: 0.0381 - accuracy: 0.9974 - val_loss: 0.0621 - val_accuracy: 0.9909\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand_augmentantion/assets\n","Modelo finalizado!\n","\n","Modelo: rand\n","Pré-processamento: True\n","Balanceamento: True\n","\n","Epoch 1/10\n","468/468 [==============================] - 112s 238ms/step - loss: 50.7344 - accuracy: 0.7854 - val_loss: 0.2178 - val_accuracy: 0.9622\n","Epoch 2/10\n","468/468 [==============================] - 110s 234ms/step - loss: 0.1478 - accuracy: 0.9769 - val_loss: 0.1218 - val_accuracy: 0.9797\n","Epoch 3/10\n","468/468 [==============================] - 109s 234ms/step - loss: 0.0918 - accuracy: 0.9889 - val_loss: 0.0985 - val_accuracy: 0.9820\n","Epoch 4/10\n","468/468 [==============================] - 110s 234ms/step - loss: 0.0775 - accuracy: 0.9919 - val_loss: 0.0858 - val_accuracy: 0.9844\n","Epoch 5/10\n","468/468 [==============================] - 109s 233ms/step - loss: 0.0806 - accuracy: 0.9935 - val_loss: 0.0898 - val_accuracy: 0.9809\n","Epoch 6/10\n","468/468 [==============================] - 109s 233ms/step - loss: 0.7554 - accuracy: 0.9821 - val_loss: 0.0989 - val_accuracy: 0.9773\n","Epoch 7/10\n","468/468 [==============================] - 109s 233ms/step - loss: 0.0457 - accuracy: 0.9959 - val_loss: 0.0804 - val_accuracy: 0.9806\n","Epoch 8/10\n","468/468 [==============================] - 109s 233ms/step - loss: 0.0399 - accuracy: 0.9964 - val_loss: 0.0764 - val_accuracy: 0.9810\n","Epoch 9/10\n","468/468 [==============================] - 109s 233ms/step - loss: 0.0372 - accuracy: 0.9968 - val_loss: 0.0818 - val_accuracy: 0.9805\n","Epoch 10/10\n","468/468 [==============================] - 109s 234ms/step - loss: 0.0388 - accuracy: 0.9968 - val_loss: 0.0866 - val_accuracy: 0.9812\n","INFO:tensorflow:Assets written to: Model/model_CNN-rand_preprocessing_augmentantion/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: False\n","Balanceamento: False\n","\n","Epoch 1/10\n","272/272 [==============================] - 72s 262ms/step - loss: 86.5918 - accuracy: 0.9265 - val_loss: 0.2541 - val_accuracy: 0.9306\n","Epoch 2/10\n","272/272 [==============================] - 70s 256ms/step - loss: 0.2556 - accuracy: 0.9297 - val_loss: 0.2522 - val_accuracy: 0.9306\n","Epoch 3/10\n","272/272 [==============================] - 70s 256ms/step - loss: 0.2463 - accuracy: 0.9297 - val_loss: 0.2368 - val_accuracy: 0.9306\n","Epoch 4/10\n","272/272 [==============================] - 69s 255ms/step - loss: 0.2021 - accuracy: 0.9302 - val_loss: 0.1976 - val_accuracy: 0.9314\n","Epoch 5/10\n","272/272 [==============================] - 69s 255ms/step - loss: 0.1611 - accuracy: 0.9480 - val_loss: 0.1823 - val_accuracy: 0.9468\n","Epoch 6/10\n","272/272 [==============================] - 69s 255ms/step - loss: 0.1351 - accuracy: 0.9658 - val_loss: 0.1887 - val_accuracy: 0.9535\n","Epoch 7/10\n","272/272 [==============================] - 69s 254ms/step - loss: 0.1234 - accuracy: 0.9730 - val_loss: 0.1890 - val_accuracy: 0.9541\n","Epoch 8/10\n","272/272 [==============================] - 69s 254ms/step - loss: 0.1117 - accuracy: 0.9776 - val_loss: 0.1697 - val_accuracy: 0.9577\n","Epoch 9/10\n","272/272 [==============================] - 69s 254ms/step - loss: 0.1061 - accuracy: 0.9807 - val_loss: 0.1981 - val_accuracy: 0.9554\n","Epoch 10/10\n","272/272 [==============================] - 70s 256ms/step - loss: 0.1030 - accuracy: 0.9834 - val_loss: 0.2038 - val_accuracy: 0.9564\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: True\n","Balanceamento: False\n","\n","Epoch 1/10\n","251/251 [==============================] - 63s 248ms/step - loss: 93.9747 - accuracy: 0.9294 - val_loss: 0.2486 - val_accuracy: 0.9327\n","Epoch 2/10\n","251/251 [==============================] - 59s 237ms/step - loss: 0.2518 - accuracy: 0.9317 - val_loss: 0.2500 - val_accuracy: 0.9327\n","Epoch 3/10\n","251/251 [==============================] - 59s 237ms/step - loss: 0.2527 - accuracy: 0.9317 - val_loss: 0.2496 - val_accuracy: 0.9327\n","Epoch 4/10\n","251/251 [==============================] - 59s 236ms/step - loss: 0.2490 - accuracy: 0.9317 - val_loss: 0.2435 - val_accuracy: 0.9327\n","Epoch 5/10\n","251/251 [==============================] - 59s 235ms/step - loss: 0.2146 - accuracy: 0.9317 - val_loss: 0.2065 - val_accuracy: 0.9327\n","Epoch 6/10\n","251/251 [==============================] - 59s 235ms/step - loss: 0.1628 - accuracy: 0.9352 - val_loss: 0.1856 - val_accuracy: 0.9350\n","Epoch 7/10\n","251/251 [==============================] - 59s 237ms/step - loss: 0.1405 - accuracy: 0.9476 - val_loss: 0.1872 - val_accuracy: 0.9366\n","Epoch 8/10\n","251/251 [==============================] - 59s 234ms/step - loss: 0.1264 - accuracy: 0.9598 - val_loss: 0.1825 - val_accuracy: 0.9483\n","Epoch 9/10\n","251/251 [==============================] - 59s 233ms/step - loss: 0.1142 - accuracy: 0.9695 - val_loss: 0.1943 - val_accuracy: 0.9517\n","Epoch 10/10\n"," 30/251 [==>...........................] - ETA: 50s - loss: 0.1044 - accuracy: 0.9773"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4PJDAY2JDlIm"},"source":["results = pd.DataFrame()\n","results['modelo'] = models_used\n","results['pré_processamento'] = preprocessing_used\n","results['balanceamento'] = augmentation_used\n","results['score_validação'] = scores_validation"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C0wXkrN4rMUd"},"source":["results.to_csv('resultados_textCNN1D.csv', index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9LJpVay3borb"},"source":["!zip -r /content/model.zip /content/Model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xSpQx5s6bwXF"},"source":["from google.colab import files\n","files.download(\"/content/model.zip\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u8d45Vi10XSX"},"source":["## Referências"]},{"cell_type":"markdown","metadata":{"id":"N3-LaAxV0WJw"},"source":["https://www.kaggle.com/hamishdickson/cnn-for-sentence-classification-by-yoon-kim\n","\n","https://github.com/pinkeshbadjatiya/twitter-hatespeech/blob/master/cnn.py\n","\n","https://github.com/alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras/blob/master/sentiment_cnn.py\n","\n","https://github.com/satya-thirumani/Python/blob/master/Sentiment%20Analysis/AV_practice_problem_Twitter_Sentiment_Analysis.ipynb\n","\n","https://github.com/yoonkim/CNN_sentence/blob/23e0e1f7355705bb083043fda05c031b15acb38c/conv_net_classes.py#L340\n","\n","https://github.com/Jverma/cnn-text-classification-keras/blob/master/text_cnn.py\n","\n","https://github.com/bentrevett/pytorch-sentiment-analysis/blob/master/4%20-%20Convolutional%20Sentiment%20Analysis.ipynb\n","\n","https://github.com/dennybritz/cnn-text-classification-tf/blob/master/text_cnn.py"]}]}