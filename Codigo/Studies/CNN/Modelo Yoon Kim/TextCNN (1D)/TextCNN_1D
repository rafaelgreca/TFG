{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":32439,"status":"ok","timestamp":1629577529903,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"MvrZGmWA8LQG"},"outputs":[],"source":["%%capture\n","!pip install pandas\n","!pip install numpy\n","!pip install tensorflow\n","!pip install keras\n","!pip install sklearn\n","!pip install matplotlib\n","!pip install seaborn\n","!pip install unidecode\n","!pip install -U imbalanced-learn\n","!pip3 install pickle5"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3119,"status":"ok","timestamp":1629577533012,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"jbkU3YVN8Pwd","outputId":"da13b0e1-069c-46d3-d56d-da250e6abcee"},"outputs":[{"name":"stdout","output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]}],"source":["import tensorflow as tf\n","import pandas as pd\n","import warnings\n","import unidecode\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pickle5 as pickle\n","import random\n","import re\n","import nltk\n","nltk.download('stopwords')\n","\n","from imblearn.over_sampling import RandomOverSampler\n","from nltk.corpus import stopwords\n","from sklearn.model_selection import train_test_split\n","from tensorflow import keras\n","from keras.models import Sequential, Model\n","from keras.layers import Reshape, Dense, Dropout, Flatten, Input, MaxPooling1D, Convolution1D, Embedding, Concatenate\n","from keras.regularizers import l2\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from sklearn.metrics import f1_score\n","\n","sw = set(stopwords.words('english'))\n","random.seed(23)\n","warnings.filterwarnings('ignore')\n","np.random.seed(23)"]},{"cell_type":"markdown","metadata":{"id":"fbIsBrCP1iMA"},"source":["## Preprocessing"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":32,"status":"ok","timestamp":1629577533014,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"DVGCip5q1hla"},"outputs":[],"source":["def remove_username(text):\n","  text = re.sub(r'\\@[^\\s]+', ' ', text)\n","  return text\n","\n","def remove_newline(text):\n","  text = text.replace('\\n', ' ')\n","  return text\n","\n","def only_letters(text):\n","  text = re.sub(r'[^a-záâàãéêèẽíìîĩóòõôúùũû\\s]+', ' ', text)\n","  return text\n","\n","def remove_link(text):\n","  text = re.sub(r'www\\.?[^\\s]+', ' ', text)\n","  return text\n","\n","def remove_hyperlink(text):\n","  text = re.sub(r'\\\u003c.?\\\u003e', ' ', text)\n","  return text\n","\n","def remove_accent(text):\n","  text = unidecode.unidecode(text)\n","  return text\n","\n","def adjustment_text(text):\n","  text = re.sub(r'\\s+', ' ', text)\n","  text = text.strip()\n","  return text\n","\n","def remove_stopwords(text):\n","  text = [word for word in text.split() if word not in sw]\n","  text = ' '.join(text)\n","  return text\n","\n","def remove_spam(text):\n","  text = re.sub(r'\\\u0026amp', ' ', text)\n","  text = re.sub(r'\\\u0026lt', ' ', text)\n","  text = re.sub(r'\\\u0026gt', ' ', text)\n","  text = re.sub(r'\\#follow|\\#followme|\\#like|\\#f4f|\\#photooftheday', ' ', text)\n","  return text\n","\n","def remove_slangs(text):\n","  text = re.sub(r' b4 ', ' before ', text)\n","  text = re.sub(r' 2b ', ' to be ', text)\n","  text = re.sub(r' 2morrow ', ' tomorrow ', text)\n","  text = re.sub(r' rn ', ' right now ', text)\n","  text = re.sub(r' brb ', ' be right back ', text)\n","  text = re.sub(r' mb ', ' my bad ', text)\n","  text = re.sub(r' luv ', ' love ', text)\n","  text = re.sub(r' b ', ' be ', text)\n","  text = re.sub(r' r ', ' are ', text)\n","  text = re.sub(r' u ', ' you ', text)\n","  text = re.sub(r' y ', ' why ', text)\n","  text = re.sub(r' ur ', ' your ', text)\n","  text = re.sub(r' hbd ', ' happy birthday ', text)\n","  text = re.sub(r' bday ', ' birthday ', text)\n","  text = re.sub(r' bihday ', ' birthday ', text)\n","  text = re.sub(r' omg ', ' oh my god ', text)\n","  text = re.sub(r' lol ', ' laughing out loud ', text)\n","  return text\n","\n","def remove_abbreviations(text):\n","  text = re.sub(r\" can\\'t \", \" can not \", text)\n","  text = re.sub(r\" i\\'m \", \" i am \", text)\n","  text = re.sub(r\" i\\'ll \", \" i will \", text)\n","  text = re.sub(r\" i\\'d \", \" i would \", text)\n","  text = re.sub(r\" i\\'ve \", \" i have \", text)\n","  text = re.sub(r\" ain\\'t \", \" am not \", text)\n","  text = re.sub(r\" haven\\'t \", \" have not \", text)\n","  text = re.sub(r\" hasn\\'t \", \" has not \", text)\n","  text = re.sub(r\" can\\'t \", \" can not \", text)\n","  text = re.sub(r\" won\\'t \", \" will not \", text)\n","  text = re.sub(r\" you\\'re \", \" you are \", text)\n","  text = re.sub(r\" we\\'re \", \" we are \", text)\n","  text = re.sub(r\" they\\'re \", \" they are \", text)\n","  text = re.sub(r\" he\\'s \", \" he is \", text)\n","  text = re.sub(r\" she\\'s \", \" she is \", text)\n","  text = re.sub(r\" it\\'s \", \" it is \", text)\n","  text = re.sub(r\" don\\'t \", \" do not \", text)\n","  text = re.sub(r\" doesn\\'t \", \" does not \", text)\n","  text = re.sub(r\" wouldn\\'t \", \" would not \", text)\n","  text = re.sub(r\" couldn\\'t \", \" could not \", text)\n","  text = re.sub(r\" shouldn\\'t \", \" should not \", text)\n","  return text\n","\n","def remove_one_len_word(text):\n","  text = re.sub(r'\\b[a-z]\\b', ' ', text)\n","  return text\n","\n","def preprocessing(data):\n","  data['cleaned_tweet'] = data['tweet'].apply(str)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(lambda x: x.lower())\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_newline)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_hyperlink)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_spam)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_link)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_username)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_abbreviations)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(only_letters)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_accent)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_slangs)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_stopwords)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(remove_one_len_word)\n","  data['cleaned_tweet'] = data['cleaned_tweet'].apply(adjustment_text)\n","  return data"]},{"cell_type":"markdown","metadata":{"id":"wM2uoJUZ8oVr"},"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1629577533018,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"0PRNAa9_-qIM","outputId":"6dfe9061-fceb-4d68-f198-f8f7249826d1"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003elabel\u003c/th\u003e\n","      \u003cth\u003etweet\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e@user when a father is dysfunctional and is s...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e@user @user thanks for #lyft credit i can't us...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003ebihday your majesty\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e#model   i love u take with u all the time in ...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003efactsguide: society now    #motivation\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e"],"text/plain":["   label                                              tweet\n","0      0   @user when a father is dysfunctional and is s...\n","1      0  @user @user thanks for #lyft credit i can't us...\n","2      0                                bihday your majesty\n","3      0  #model   i love u take with u all the time in ...\n","4      0             factsguide: society now    #motivation"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["normal_data = pd.read_csv('Data/train.csv')\n","normal_data = normal_data.drop(columns=['id'])\n","normal_data.head()"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29,"status":"ok","timestamp":1629577533023,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"iv3WqTC3kKPP","outputId":"67680702-e1a3-43b7-e6b2-53332d362321"},"outputs":[{"data":{"text/plain":["(31962, 2)"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["normal_data.shape"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":341,"status":"ok","timestamp":1629577533340,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"YWsDE9A2kD_u","outputId":"c96ec91a-8bfb-4253-8e19-6da16ffca26b"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003etweet\u003c/th\u003e\n","      \u003cth\u003elabel\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e@user when a father is dysfunctional and is s...\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e@user @user thanks for #lyft credit i can't us...\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003ebihday your majesty\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e#model   i love u take with u all the time in ...\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003efactsguide: society now    #motivation\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e"],"text/plain":["                                               tweet  label\n","0   @user when a father is dysfunctional and is s...      0\n","1  @user @user thanks for #lyft credit i can't us...      0\n","2                                bihday your majesty      0\n","3  #model   i love u take with u all the time in ...      0\n","4             factsguide: society now    #motivation      0"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["ros = RandomOverSampler(random_state=23, sampling_strategy='minority')\n","X_resampled, y_resampled = ros.fit_resample(normal_data[['tweet']], normal_data['label'])\n","data_augmentation = pd.concat([X_resampled, y_resampled], axis=1)\n","data_augmentation.head()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1629577533342,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"szfpHt7rzTIb","outputId":"4c8e0de3-3d12-403a-ac2b-e8e00a5e6845"},"outputs":[{"data":{"text/plain":["(59440, 2)"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["data_augmentation.shape"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":3006,"status":"ok","timestamp":1629577536338,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"2Y4K9Bt11Zeu","outputId":"1fbf99c1-5446-489b-e107-58f157e2d722"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003elabel\u003c/th\u003e\n","      \u003cth\u003etweet\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003efather dysfunctional selfish drags kids dysfun...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003ethanks lyft credit use cause offer wheelchair ...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003ebirthday majesty\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003emodel love take time urd ddddd\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003efactsguide society motivation\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e"],"text/plain":["   label                                              tweet\n","0      0  father dysfunctional selfish drags kids dysfun...\n","1      0  thanks lyft credit use cause offer wheelchair ...\n","2      0                                   birthday majesty\n","3      0                     model love take time urd ddddd\n","4      0                      factsguide society motivation"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["preprocessed_data = normal_data.copy()\n","preprocessed_data = preprocessing(preprocessed_data)\n","preprocessed_data = preprocessed_data.replace('None', pd.NA)\n","preprocessed_data = preprocessed_data.dropna()\n","preprocessed_data = preprocessed_data.drop_duplicates()\n","preprocessed_data = preprocessed_data.drop(columns=['tweet'])\n","preprocessed_data = preprocessed_data.rename(columns={'cleaned_tweet': 'tweet'})\n","preprocessed_data.head()"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1629577536340,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"pTkLD9L4zM0Z","outputId":"0d25084c-a915-42d5-d97e-5b3315f92ae5"},"outputs":[{"data":{"text/plain":["(29530, 2)"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["preprocessed_data.shape"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":29,"status":"ok","timestamp":1629577536344,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"hebFvYTaBpAG","outputId":"f622f5ab-465a-4e39-bc4c-014d1e605c12"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003etweet\u003c/th\u003e\n","      \u003cth\u003elabel\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003efather dysfunctional selfish drags kids dysfun...\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003ethanks lyft credit use cause offer wheelchair ...\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003ebirthday majesty\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003emodel love take time urd ddddd\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003efactsguide society motivation\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e"],"text/plain":["                                               tweet  label\n","0  father dysfunctional selfish drags kids dysfun...      0\n","1  thanks lyft credit use cause offer wheelchair ...      0\n","2                                   birthday majesty      0\n","3                     model love take time urd ddddd      0\n","4                      factsguide society motivation      0"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["ros = RandomOverSampler(random_state=23, sampling_strategy='minority')\n","X_resampled, y_resampled = ros.fit_resample(preprocessed_data[['tweet']], preprocessed_data['label'])\n","data_preprocessing_augmentation = pd.concat([X_resampled, y_resampled], axis=1)\n","data_preprocessing_augmentation.head()"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1629577536345,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"Q1gSgHkFzPOt","outputId":"9bd6ec65-d59c-40dd-cb3c-340c05dbfa26"},"outputs":[{"data":{"text/plain":["(55034, 2)"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["data_preprocessing_augmentation.shape"]},{"cell_type":"markdown","metadata":{"id":"iCpQSNEE7wlo"},"source":["## Word2vec"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":22,"status":"ok","timestamp":1629577536347,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"HmVKbyWJ7y1W"},"outputs":[],"source":["with open(r\"Data/word2vec.pickle\", \"rb\") as output_file:\n","    word2vec_embedding = pickle.load(output_file)"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":477,"status":"ok","timestamp":1629577536804,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"Df2gQAxIsteF"},"outputs":[],"source":["with open(r\"Data/word2vec_preprocessing.pickle\", \"rb\") as output_file:\n","    word2vec_preprocessing_embedding = pickle.load(output_file)"]},{"cell_type":"markdown","metadata":{"id":"2tnMZB6L9Cwf"},"source":["## Parameters"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":20,"status":"ok","timestamp":1629577536805,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"RLPjaO0_9HRS"},"outputs":[],"source":["non_linearity_function = 'relu'\n","kernel_size = [3, 4, 5]\n","filters = 100\n","dropout_rate = 0.5\n","l2_constraint = 3\n","epochs = 10\n","batch_size = 100\n","embedding_dim = 300\n","length_size = 10"]},{"cell_type":"markdown","metadata":{"id":"xgf0e9zIM_Ee"},"source":["## Tokenization + padding + splitting data step"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1629577536806,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"wQ6cy3KnF4s_"},"outputs":[],"source":["def preprocessing_step(data):\n","  tokenizer = Tokenizer()\n","  tokenizer.fit_on_texts(data['tweet'].values)\n","  data['tokenized'] = tokenizer.texts_to_sequences(data['tweet'].values)\n","\n","  vocab_size = len(tokenizer.word_index) + 1\n","\n","  X = pad_sequences(sequences = data['tokenized'],\n","                  maxlen = length_size,\n","                  padding = 'post')\n","\n","  y = data['label']\n","\n","  X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.15, random_state=23)\n","\n","  return vocab_size, tokenizer, X_train, X_validation, y_train, y_validation"]},{"cell_type":"markdown","metadata":{"id":"Raq3KN353mxO"},"source":["## Predict"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1629577536807,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"dSZq35fD3lTY"},"outputs":[],"source":["def predict(tokenizer, model, prep, augmentation, nome):\n","\n","  test = pd.read_csv('Data/test.csv')\n","\n","  if prep:\n","    test = preprocessing(test)\n","    test['tokenized'] = tokenizer.texts_to_sequences(test['cleaned_tweet'].values)\n","  else:\n","    test['tokenized'] = tokenizer.texts_to_sequences(test['tweet'].values)\n","\n","  X_test = pad_sequences(sequences = test['tokenized'],\n","                         maxlen = length_size,\n","                         padding = 'post')\n","\n","  predicted = (model.predict(X_test) \u003e 0.5).astype(\"int32\")\n","  prediction = pd.DataFrame()\n","  prediction['id'] = test['id']\n","  prediction['label'] = predicted\n","\n","  if prep:\n","\n","    if augmentation:\n","      prediction.to_csv('Submission/' + nome + '_preprocessing_augmentation.csv', index=False)\n","    else:\n","      prediction.to_csv('Submission/' + nome + '_preprocessing.csv', index=False)\n","\n","  else:\n","\n","    if augmentation:\n","      prediction.to_csv('Submission/' + nome + '_augmentation.csv', index=False)\n","    else:\n","      prediction.to_csv('Submission/' + nome + '.csv', index=False)"]},{"cell_type":"markdown","metadata":{"id":"KmfpDUot3oyv"},"source":["## Save Models"]},{"cell_type":"code","execution_count":17,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1629577536808,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"_ou2_2Zq3o7f"},"outputs":[],"source":["def save_model(modelo, nome_modelo, preprocessing, augmentation):\n","  \n","  file_name = 'model_'\n","\n","  if preprocessing:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_preprocessing_augmentantion'\n","    else:\n","      file_name = file_name + nome_modelo + '_preprocessing'\n","  else:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_augmentantion'\n","    else:\n","      file_name = file_name + nome_modelo\n","\n","  modelo.save('Model/' + file_name)"]},{"cell_type":"markdown","metadata":{"id":"PWYmZv062f_D"},"source":["## Save embeddings"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1629577536809,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"xtMYplLE2gPS"},"outputs":[],"source":["def save_embedding(modelo, tokenizer, nome_modelo, preprocessing, augmentation):\n","  embeddings = modelo.get_layer('embedding').get_weights()[0]\n","  w2v_my = {}\n","\n","  for word, index in tokenizer.word_index.items():\n","      w2v_my[word] = embeddings[index]\n","  \n","  file_name = 'embedding_'\n","\n","  if preprocessing:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_preprocessing_augmentantion.pickle'\n","    else:\n","      file_name = file_name + nome_modelo + '_preprocessing.pickle'\n","  else:\n","    if augmentation:\n","      file_name = file_name + nome_modelo + '_augmentantion.pickle'\n","    else:\n","      file_name = file_name + nome_modelo + '.pickle'\n","\n","  with open('Model/' + file_name, 'wb') as handle:\n","    pickle.dump(w2v_my, handle, protocol=pickle.HIGHEST_PROTOCOL)"]},{"cell_type":"markdown","metadata":{"id":"Xn-bmRXK8fwV"},"source":["## CNN-rand"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1629577536810,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"9A-7AYJW8fMI"},"outputs":[],"source":["def cnn_rand(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=length_size)\n","\n","  #embedding layer\n","  embedding = Embedding(input_dim=vocab_size,\n","                        output_dim=embedding_dim,\n","                        input_length=length_size,\n","                        name='embedding')(input)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution1D(filters=filters,\n","                        kernel_size=size,\n","                        activation=non_linearity_function,\n","                        kernel_regularizer=l2(l2_constraint))(embedding)\n","    \n","    pool = MaxPooling1D(strides=1,\n","                        pool_size=length_size-size+1,\n","                        padding=\"valid\")(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_random = Model(inputs=input, outputs=output)\n","  model_random.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_random.summary()\n","\n","  history_random = model_random.fit(X_train, \n","                                    y_train,\n","                                    batch_size=batch_size,\n","                                    epochs=epochs,\n","                                    validation_data=(X_validation, y_validation),\n","                                    shuffle=True)\n","  \n","  save_embedding(model_random, tokenizer, 'CNN-rand', preprocessing, augmentation)\n","\n","  save_model(model_random, 'CNN-rand', preprocessing, augmentation)\n","\n","  predicted_validation = (model_random.predict(X_validation) \u003e 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_random, preprocessing, augmentation, 'CNN-rand')\n","  \n","  return model_random, history_random, score"]},{"cell_type":"markdown","metadata":{"id":"CI9jb9a40sWZ"},"source":["## CNN-static"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1629577536811,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"JDx6XooT0ulS"},"outputs":[],"source":["def cnn_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=length_size)\n","\n","  #embedding\n","  if preprocessing:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_preprocessing_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","  else:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution1D(filters=filters,\n","                        kernel_size=size,\n","                        activation=non_linearity_function,\n","                        kernel_regularizer=l2(l2_constraint))(embedding)\n","    \n","    pool = MaxPooling1D(strides=1,\n","                        pool_size=length_size-size+1,\n","                        padding=\"valid\")(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_static = Model(inputs=input, outputs=output)\n","  model_static.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_static.summary()\n","\n","  history_static = model_static.fit(X_train, \n","                                    y_train,\n","                                    batch_size=batch_size,\n","                                    epochs=epochs,\n","                                    validation_data=(X_validation, y_validation),\n","                                    shuffle=True)\n","  \n","  save_embedding(model_static, tokenizer, 'CNN-static', preprocessing, augmentation)\n","\n","  save_model(model_static, 'CNN-static', preprocessing, augmentation)\n","\n","  predicted_validation = (model_static.predict(X_validation) \u003e 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_static, preprocessing, augmentation, 'CNN-static')\n","  \n","  return model_static, history_static, score"]},{"cell_type":"markdown","metadata":{"id":"O3f-PZSIBoaS"},"source":["## CNN non-static"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":16,"status":"ok","timestamp":1629577536811,"user":{"displayName":"Rafael Greca","photoUrl":"","userId":"13108790060757877730"},"user_tz":180},"id":"KC_AHFhvBq7h"},"outputs":[],"source":["def cnn_non_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, preprocessing, augmentation):\n","\n","  #model input\n","  input = Input(shape=length_size)\n","\n","  #embedding layer\n","  if preprocessing:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_preprocessing_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","  else:\n","    embedding = Embedding(input_dim=vocab_size,\n","                          output_dim=embedding_dim,\n","                          input_length=length_size,\n","                          weights=[word2vec_embedding],\n","                          trainable=True,\n","                          name='embedding')(input)\n","\n","  #convolution layer\n","  convs = []\n","  for size in kernel_size:\n","    conv = Convolution1D(filters=filters,\n","                        kernel_size=size,\n","                        activation=non_linearity_function,\n","                        kernel_regularizer=l2(l2_constraint))(embedding)\n","    \n","    pool = MaxPooling1D(strides=1,\n","                        pool_size=length_size-size+1,\n","                        padding=\"valid\")(conv)\n","    convs.append(pool)\n","\n","  #concatenate convs layers\n","  concatenated = Concatenate(axis=1)(convs)\n","\n","  #flatten layer\n","  flatten = Flatten()(concatenated)\n","\n","  #droupout layer\n","  dropout = Dropout(0.5)(flatten)\n","\n","  #output layer\n","  output = Dense(units=1, activation='sigmoid')(dropout)\n","\n","  model_non_static = Model(inputs=input, outputs=output)\n","  model_non_static.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  #model_non_static.summary()\n","\n","  history_non_static = model_non_static.fit(X_train, \n","                                            y_train,\n","                                            batch_size=batch_size,\n","                                            epochs=epochs,\n","                                            validation_data=(X_validation, y_validation),\n","                                            shuffle=True)\n","  \n","  save_embedding(model_non_static, tokenizer, 'CNN-non-static', preprocessing, augmentation)\n","\n","  save_model(model_non_static, 'CNN-non-static', preprocessing, augmentation)\n","\n","  predicted_validation = (model_non_static.predict(X_validation) \u003e 0.5).astype(\"int32\")\n","  score = f1_score(y_validation, predicted_validation, average='weighted')\n","  score = round(score, 4)\n","\n","  predict(tokenizer, model_non_static, preprocessing, augmentation, 'CNN-non-static')\n","\n","  return model_non_static, history_non_static, score"]},{"cell_type":"markdown","metadata":{"id":"Cg6enS3gDizi"},"source":["## Main"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"xDxJkScXDlFI"},"outputs":[{"name":"stdout","output_type":"stream","text":["Modelo: non_static\n","Pré-processamento: False\n","Balanceamento: False\n","\n","Epoch 1/10\n","272/272 [==============================] - 66s 239ms/step - loss: 86.8277 - accuracy: 0.9274 - val_loss: 0.2546 - val_accuracy: 0.9306\n","Epoch 2/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.2580 - accuracy: 0.9297 - val_loss: 0.2549 - val_accuracy: 0.9306\n","Epoch 3/10\n","272/272 [==============================] - 64s 236ms/step - loss: 0.2590 - accuracy: 0.9297 - val_loss: 0.2553 - val_accuracy: 0.9306\n","Epoch 4/10\n","272/272 [==============================] - 64s 235ms/step - loss: 0.2589 - accuracy: 0.9297 - val_loss: 0.2557 - val_accuracy: 0.9306\n","Epoch 5/10\n","272/272 [==============================] - 65s 239ms/step - loss: 0.2584 - accuracy: 0.9297 - val_loss: 0.2560 - val_accuracy: 0.9306\n","Epoch 6/10\n","272/272 [==============================] - 64s 235ms/step - loss: 0.2582 - accuracy: 0.9297 - val_loss: 0.2562 - val_accuracy: 0.9306\n","Epoch 7/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.2567 - accuracy: 0.9297 - val_loss: 0.2547 - val_accuracy: 0.9306\n","Epoch 8/10\n","272/272 [==============================] - 63s 230ms/step - loss: 0.2488 - accuracy: 0.9297 - val_loss: 0.2489 - val_accuracy: 0.9306\n","Epoch 9/10\n","272/272 [==============================] - 63s 230ms/step - loss: 0.2321 - accuracy: 0.9297 - val_loss: 0.2387 - val_accuracy: 0.9306\n","Epoch 10/10\n","272/272 [==============================] - 63s 232ms/step - loss: 0.2125 - accuracy: 0.9297 - val_loss: 0.2468 - val_accuracy: 0.9306\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: True\n","Balanceamento: False\n","\n","Epoch 1/10\n","251/251 [==============================] - 55s 214ms/step - loss: 94.1190 - accuracy: 0.9159 - val_loss: 0.2487 - val_accuracy: 0.9327\n","Epoch 2/10\n","251/251 [==============================] - 53s 212ms/step - loss: 0.2531 - accuracy: 0.9317 - val_loss: 0.2490 - val_accuracy: 0.9327\n","Epoch 3/10\n","251/251 [==============================] - 53s 211ms/step - loss: 0.2534 - accuracy: 0.9317 - val_loss: 0.2499 - val_accuracy: 0.9327\n","Epoch 4/10\n","251/251 [==============================] - 54s 214ms/step - loss: 0.2538 - accuracy: 0.9317 - val_loss: 0.2502 - val_accuracy: 0.9327\n","Epoch 5/10\n","251/251 [==============================] - 53s 213ms/step - loss: 0.2545 - accuracy: 0.9317 - val_loss: 0.2507 - val_accuracy: 0.9327\n","Epoch 6/10\n","251/251 [==============================] - 53s 212ms/step - loss: 0.2553 - accuracy: 0.9317 - val_loss: 0.2516 - val_accuracy: 0.9327\n","Epoch 7/10\n","251/251 [==============================] - 53s 213ms/step - loss: 0.2559 - accuracy: 0.9317 - val_loss: 0.2510 - val_accuracy: 0.9327\n","Epoch 8/10\n","251/251 [==============================] - 54s 214ms/step - loss: 0.2554 - accuracy: 0.9317 - val_loss: 0.2516 - val_accuracy: 0.9327\n","Epoch 9/10\n","251/251 [==============================] - 54s 214ms/step - loss: 0.2548 - accuracy: 0.9317 - val_loss: 0.2514 - val_accuracy: 0.9327\n","Epoch 10/10\n","251/251 [==============================] - 55s 221ms/step - loss: 0.2537 - accuracy: 0.9317 - val_loss: 0.2511 - val_accuracy: 0.9327\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static_preprocessing/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: False\n","Balanceamento: True\n","\n","Epoch 1/10\n","506/506 [==============================] - 124s 241ms/step - loss: 47.3519 - accuracy: 0.5772 - val_loss: 0.6952 - val_accuracy: 0.6244\n","Epoch 2/10\n","506/506 [==============================] - 122s 242ms/step - loss: 0.5910 - accuracy: 0.8131 - val_loss: 0.4033 - val_accuracy: 0.9337\n","Epoch 3/10\n","506/506 [==============================] - 122s 242ms/step - loss: 0.3140 - accuracy: 0.9522 - val_loss: 0.3139 - val_accuracy: 0.9454\n","Epoch 4/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.2359 - accuracy: 0.9726 - val_loss: 0.2373 - val_accuracy: 0.9670\n","Epoch 5/10\n","506/506 [==============================] - 118s 234ms/step - loss: 0.2012 - accuracy: 0.9806 - val_loss: 0.2027 - val_accuracy: 0.9789\n","Epoch 6/10\n","506/506 [==============================] - 119s 236ms/step - loss: 0.1959 - accuracy: 0.9833 - val_loss: 0.2400 - val_accuracy: 0.9712\n","Epoch 7/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.1828 - accuracy: 0.9865 - val_loss: 0.2672 - val_accuracy: 0.9801\n","Epoch 8/10\n","506/506 [==============================] - 120s 238ms/step - loss: 0.1797 - accuracy: 0.9893 - val_loss: 0.2354 - val_accuracy: 0.9796\n","Epoch 9/10\n","506/506 [==============================] - 119s 235ms/step - loss: 0.1968 - accuracy: 0.9887 - val_loss: 0.1827 - val_accuracy: 0.9836\n","Epoch 10/10\n","506/506 [==============================] - 123s 243ms/step - loss: 0.1736 - accuracy: 0.9908 - val_loss: 0.1498 - val_accuracy: 0.9862\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static_augmentantion/assets\n","Modelo finalizado!\n","\n","Modelo: non_static\n","Pré-processamento: True\n","Balanceamento: True\n","\n","Epoch 1/10\n","468/468 [==============================] - 103s 218ms/step - loss: 50.8503 - accuracy: 0.5881 - val_loss: 0.6958 - val_accuracy: 0.6216\n","Epoch 2/10\n","468/468 [==============================] - 102s 217ms/step - loss: 0.5468 - accuracy: 0.8610 - val_loss: 0.3550 - val_accuracy: 0.9469\n","Epoch 3/10\n","468/468 [==============================] - 102s 219ms/step - loss: 0.2803 - accuracy: 0.9615 - val_loss: 0.2426 - val_accuracy: 0.9704\n","Epoch 4/10\n","468/468 [==============================] - 103s 219ms/step - loss: 0.2134 - accuracy: 0.9772 - val_loss: 0.2057 - val_accuracy: 0.9743\n","Epoch 5/10\n","468/468 [==============================] - 103s 220ms/step - loss: 0.1874 - accuracy: 0.9833 - val_loss: 0.1866 - val_accuracy: 0.9780\n","Epoch 6/10\n","468/468 [==============================] - 104s 222ms/step - loss: 0.1845 - accuracy: 0.9851 - val_loss: 0.2003 - val_accuracy: 0.9840\n","Epoch 7/10\n","468/468 [==============================] - 103s 219ms/step - loss: 0.1737 - accuracy: 0.9881 - val_loss: 0.1890 - val_accuracy: 0.9789\n","Epoch 8/10\n","468/468 [==============================] - 101s 216ms/step - loss: 0.1779 - accuracy: 0.9885 - val_loss: 0.1739 - val_accuracy: 0.9823\n","Epoch 9/10\n","468/468 [==============================] - 98s 209ms/step - loss: 0.1582 - accuracy: 0.9909 - val_loss: 0.1610 - val_accuracy: 0.9830\n","Epoch 10/10\n","468/468 [==============================] - 94s 200ms/step - loss: 0.1755 - accuracy: 0.9904 - val_loss: 0.2123 - val_accuracy: 0.9794\n","INFO:tensorflow:Assets written to: Model/model_CNN-non-static_preprocessing_augmentantion/assets\n","Modelo finalizado!\n","\n"]}],"source":["use_augmentation = [False, True]\n","use_preprocessing = [False, True]\n","models_used = []\n","preprocessing_used = []\n","augmentation_used = []\n","scores_validation = []\n","models = ['non_static']\n","\n","for model in models:\n","\n","  for aug in use_augmentation:\n","\n","    for prep in use_preprocessing:\n","\n","      if aug and prep:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(data_preprocessing_augmentation)\n","      elif aug and not prep:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(data_augmentation)\n","      elif prep and not aug:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(preprocessed_data)\n","      else:\n","        vocab_size, tokenizer, X_train, X_validation, y_train, y_validation = preprocessing_step(normal_data) \n","\n","      print('Modelo: {}\\nPré-processamento: {}\\nBalanceamento: {}\\n'.format(model, prep, aug))\n","\n","      if model == 'rand':\n","        m, history, validation_score = cnn_rand(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      elif model == 'static':\n","        m, history, validation_score = cnn_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      elif model == 'non_static':\n","        m, history, validation_score = cnn_non_static(vocab_size, tokenizer, X_train, X_validation, y_train, y_validation, prep, aug)\n","      else:\n","        print('Modelo não encontrado')\n","        break\n","        \n","      print('Modelo finalizado!\\n')\n","\n","      models_used.append(model)\n","      preprocessing_used.append(prep)\n","      augmentation_used.append(aug)\n","      scores_validation.append(validation_score)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4PJDAY2JDlIm"},"outputs":[],"source":["results = pd.DataFrame()\n","results['modelo'] = models_used\n","results['pré_processamento'] = preprocessing_used\n","results['balanceamento'] = augmentation_used\n","results['score_validação'] = scores_validation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"C0wXkrN4rMUd"},"outputs":[],"source":["results.to_csv('resultados_textCNN1D.csv', index=False)"]},{"cell_type":"markdown","metadata":{"id":"u8d45Vi10XSX"},"source":["## Referências"]},{"cell_type":"markdown","metadata":{"id":"N3-LaAxV0WJw"},"source":["https://www.kaggle.com/hamishdickson/cnn-for-sentence-classification-by-yoon-kim\n","\n","https://github.com/pinkeshbadjatiya/twitter-hatespeech/blob/master/cnn.py\n","\n","https://github.com/alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras/blob/master/sentiment_cnn.py\n","\n","https://github.com/satya-thirumani/Python/blob/master/Sentiment%20Analysis/AV_practice_problem_Twitter_Sentiment_Analysis.ipynb\n","\n","https://github.com/yoonkim/CNN_sentence/blob/23e0e1f7355705bb083043fda05c031b15acb38c/conv_net_classes.py#L340\n","\n","https://github.com/Jverma/cnn-text-classification-keras/blob/master/text_cnn.py\n","\n","https://github.com/bentrevett/pytorch-sentiment-analysis/blob/master/4%20-%20Convolutional%20Sentiment%20Analysis.ipynb\n","\n","https://github.com/dennybritz/cnn-text-classification-tf/blob/master/text_cnn.py"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyNGdKpvJckm4dlP2Dbxs2kt","collapsed_sections":[],"name":"TextCNN_1D","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}